package app;

import java.awt.HeadlessException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;

import java.awt.AWTException;
import java.awt.Robot;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.management.modelmbean.ModelMBean;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Judá Aarón
 */
public class principal extends javax.swing.JFrame implements Runnable {

    ArrayList<String> servicioUsuario = new ArrayList();
    ArrayList<String> servicioPassword = new ArrayList();

    ArrayList<String> llamadasUser = new ArrayList();
    ArrayList<String> llamadasPassword = new ArrayList();

    ArrayList<String> EmpleadosUser = new ArrayList();
    ArrayList<String> EmpleadosPassword = new ArrayList();

    ArrayList<String> ADMINSUSER = new ArrayList();
    ArrayList<String> ADMINPASS = new ArrayList();

    String hora, minutos, segundos;
    Thread hilo;
    ImageIcon Imagen[] = new ImageIcon[5];
    int contImages = 1;

    /**
     * Creates new form principal
     */
    public principal() {
        initComponents();
        setResizable(false);
        this.setExtendedState(MAXIMIZED_BOTH);
        setTitle("TIENDA");
        this.setLocationRelativeTo(null);
        hilo = new Thread(this);
        hilo.start();
        for (int i = 1; i < 5; i++) {
            Imagen[i] = new ImageIcon(getClass().getResource("/app/fotos/judd" + i + ".jpeg"));
            jLabel10.setIcon(Imagen[1]);

        }
        //TextPrompt cc2 = new TextPrompt("¿Qué estás buscando?", txt_buscar);
        servicioUsuario.add("Daniel");
        servicioUsuario.add("Andrea");
        servicioUsuario.add("Sebastian");

        servicioPassword.add("12345");
        servicioPassword.add("54321");
        servicioPassword.add("6789");

        llamadasUser.add("Lucia");
        llamadasUser.add("David");
        llamadasUser.add("Santiago");

        llamadasPassword.add("abcd");
        llamadasPassword.add("efgh");
        llamadasPassword.add("ijkl");

        EmpleadosUser.add("James");
        EmpleadosUser.add("Daniela");
        EmpleadosUser.add("Andres");

        EmpleadosPassword.add("123");
        EmpleadosPassword.add("a12b");
        EmpleadosPassword.add("a13b");

        ADMINSUSER.add("Yuda");
        ADMINSUSER.add("Paulina");
        ADMINSUSER.add("Diego");

        ADMINPASS.add("1999j");
        ADMINPASS.add("2002p");
        ADMINPASS.add("2000d");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        login_clientes = new javax.swing.JDialog();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        id_login_cliente = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        password_login_cliente = new javax.swing.JPasswordField();
        btn_ingresarCliente = new javax.swing.JButton();
        btn_regresarCliente = new javax.swing.JButton();
        btn_crear_cliente = new javax.swing.JButton();
        fondo_loginCliente = new javax.swing.JLabel();
        login_empleados = new javax.swing.JDialog();
        btn_login_empleado = new javax.swing.JButton();
        user_empleado = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        password_empleado = new javax.swing.JPasswordField();
        jTextField6 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        btn_regresar_empleado = new javax.swing.JButton();
        fondo_login_empleados = new javax.swing.JLabel();
        Perfil_clientes_enLinea = new javax.swing.JDialog();
        btn_cerrar_sesion = new javax.swing.JButton();
        siguiente = new javax.swing.JButton();
        anterior = new javax.swing.JButton();
        cb_clienteV = new javax.swing.JComboBox<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        tabla_cliente = new javax.swing.JTable();
        boton_carrito = new javax.swing.JButton();
        verCarrito = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        administradores = new javax.swing.JDialog();
        tabbed_eliminar = new javax.swing.JTabbedPane();
        panel_crear = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla_crear = new javax.swing.JTable();
        boton_crear = new javax.swing.JButton();
        btn_regresar4 = new javax.swing.JButton();
        cb_crear = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        panel_modificar = new javax.swing.JPanel();
        cb_modificar = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla_modificar = new javax.swing.JTable();
        btn_modificar_sql = new javax.swing.JButton();
        btn_regresar3 = new javax.swing.JButton();
        jLabel33 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        panel_eliminar = new javax.swing.JPanel();
        cb_eliminar = new javax.swing.JComboBox<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabla_eliminar = new javax.swing.JTable();
        jLabel31 = new javax.swing.JLabel();
        btn_eliminar_sql = new javax.swing.JButton();
        btn_regresar2 = new javax.swing.JButton();
        jLabel32 = new javax.swing.JLabel();
        btn_ver_bitacora = new javax.swing.JButton();
        fondo_admiistradores = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        Perfil_clientes_frecuentes = new javax.swing.JDialog();
        txt_buscar1 = new javax.swing.JTextField();
        btn_cerrar_sesion1 = new javax.swing.JButton();
        btn_buscar_producto1 = new javax.swing.JButton();
        siguiente1 = new javax.swing.JButton();
        anterior1 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        Perfil_clientes_poco_frecuentes = new javax.swing.JDialog();
        txt_buscar2 = new javax.swing.JTextField();
        btn_cerrar_sesion2 = new javax.swing.JButton();
        btn_buscar_producto2 = new javax.swing.JButton();
        siguiente2 = new javax.swing.JButton();
        anterior2 = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem15 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenu7 = new javax.swing.JMenu();
        jTextField3 = new javax.swing.JTextField();
        perfil_empleados = new javax.swing.JDialog();
        btn_cerrar_sesion_empleado = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabla_empleado = new javax.swing.JTable();
        cb_almacen = new javax.swing.JComboBox<>();
        jLabel28 = new javax.swing.JLabel();
        boton_insertarE = new javax.swing.JButton();
        login_admin = new javax.swing.JDialog();
        btn_ingresar_admin = new javax.swing.JButton();
        btn_regresar_loginAdmin = new javax.swing.JButton();
        password_admin = new javax.swing.JPasswordField();
        jTextField1 = new javax.swing.JTextField();
        user_admin = new javax.swing.JTextField();
        jLabel29 = new javax.swing.JLabel();
        fondo_login_admin = new javax.swing.JLabel();
        crear_cuenta_cliente = new javax.swing.JDialog();
        jLabel37 = new javax.swing.JLabel();
        id_registrar_cliente = new javax.swing.JTextField();
        nombre_registrar_cliente = new javax.swing.JTextField();
        btn_siguiente = new javax.swing.JButton();
        cmb_tipoCliente = new javax.swing.JComboBox<>();
        btn_regresar = new javax.swing.JButton();
        jLabel38 = new javax.swing.JLabel();
        fondo_registro_clientes = new javax.swing.JLabel();
        cliente_en_linea = new javax.swing.JDialog();
        jScrollPane8 = new javax.swing.JScrollPane();
        tabla_carrito = new javax.swing.JTable();
        salirCliente = new javax.swing.JButton();
        comprarCliente = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        tabla_fac = new javax.swing.JTable();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel47 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        jLabel48 = new javax.swing.JLabel();
        ServicioAlCliente = new javax.swing.JDialog();
        txt_busqueda = new javax.swing.JTextField();
        btn_regresar_servicio = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        btn_busqueda = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabla_servicio = new javax.swing.JTable();
        fondo_servicioAlCliente = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        centrode_llamadas = new javax.swing.JDialog();
        jButton2 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jTextField2 = new javax.swing.JTextField();
        fondo_centroLlamadas = new javax.swing.JLabel();
        jLabel42 = new javax.swing.JLabel();
        ventana_bitacora = new javax.swing.JDialog();
        jScrollPane10 = new javax.swing.JScrollPane();
        tabla_bitacora = new javax.swing.JTable();
        jLabel45 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel46 = new javax.swing.JLabel();
        btn_regresar_tabbed = new javax.swing.JLabel();
        titulo = new javax.swing.JLabel();
        boton_salir = new javax.swing.JButton();
        jLabel40 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btn_admin = new javax.swing.JButton();
        hora_jbl = new javax.swing.JLabel();
        titulo2 = new javax.swing.JLabel();
        boton_empleado = new javax.swing.JButton();
        boton_Cliente = new javax.swing.JButton();
        fondo_princiipal = new javax.swing.JLabel();
        fondo_principal2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        login_clientes.setUndecorated(true);
        login_clientes.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        login_clientes.getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 120, 380, 220));

        jLabel12.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(255, 255, 255));
        jLabel12.setText("¿Eres cliente nuevo?");
        login_clientes.getContentPane().add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 36, 130, 30));

        id_login_cliente.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        id_login_cliente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        login_clientes.getContentPane().add(id_login_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 440, 180, 30));

        jLabel3.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("CLIENT LOGIN");
        login_clientes.getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 360, 150, 30));

        password_login_cliente.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        password_login_cliente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        login_clientes.getContentPane().add(password_login_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 470, 180, 30));

        btn_ingresarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/login (1).png"))); // NOI18N
        btn_ingresarCliente.setContentAreaFilled(false);
        btn_ingresarCliente.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/login_1.png"))); // NOI18N
        btn_ingresarCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_ingresarClienteMouseClicked(evt);
            }
        });
        login_clientes.getContentPane().add(btn_ingresarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 500, 140, 60));

        btn_regresarCliente.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_regresarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/reply-message.png"))); // NOI18N
        btn_regresarCliente.setText("Regresar");
        btn_regresarCliente.setContentAreaFilled(false);
        btn_regresarCliente.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/reply-message (1).png"))); // NOI18N
        btn_regresarCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_regresarClienteMouseClicked(evt);
            }
        });
        login_clientes.getContentPane().add(btn_regresarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 570, 180, 60));

        btn_crear_cliente.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        btn_crear_cliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/follow.png"))); // NOI18N
        btn_crear_cliente.setText("Crea una cuenta");
        btn_crear_cliente.setContentAreaFilled(false);
        btn_crear_cliente.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/follow (1).png"))); // NOI18N
        btn_crear_cliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_crear_clienteMouseClicked(evt);
            }
        });
        login_clientes.getContentPane().add(btn_crear_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 60, 200, 80));

        fondo_loginCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/WhatsApp Image 2021-03-18 at 21.35.49.jpeg"))); // NOI18N
        login_clientes.getContentPane().add(fondo_loginCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 630));

        login_empleados.setUndecorated(true);
        login_empleados.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_login_empleado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/log-in.png"))); // NOI18N
        btn_login_empleado.setContentAreaFilled(false);
        btn_login_empleado.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/log-in (1).png"))); // NOI18N
        btn_login_empleado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_login_empleadoMouseClicked(evt);
            }
        });
        login_empleados.getContentPane().add(btn_login_empleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 430, 120, 60));

        user_empleado.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        user_empleado.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        login_empleados.getContentPane().add(user_empleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 320, 210, 40));

        jLabel27.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("Login");
        login_empleados.getContentPane().add(jLabel27, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 490, 50, 20));

        jLabel26.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel26.setText("EMPLOYEE LOGIN");
        login_empleados.getContentPane().add(jLabel26, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 270, 190, 30));

        password_empleado.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        password_empleado.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        login_empleados.getContentPane().add(password_empleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 380, 210, 40));

        jTextField6.setEditable(false);
        jTextField6.setBackground(new java.awt.Color(255, 204, 51));
        jTextField6.setAutoscrolls(false);
        jTextField6.setBorder(null);
        login_empleados.getContentPane().add(jTextField6, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 260, 340, 280));

        jTextField4.setEditable(false);
        jTextField4.setBackground(new java.awt.Color(255, 204, 0));
        jTextField4.setAutoscrolls(false);
        jTextField4.setBorder(null);
        login_empleados.getContentPane().add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 400, 340, 70));

        btn_regresar_empleado.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_regresar_empleado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/reply-message.png"))); // NOI18N
        btn_regresar_empleado.setText("Regresar");
        btn_regresar_empleado.setContentAreaFilled(false);
        btn_regresar_empleado.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        btn_regresar_empleado.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        btn_regresar_empleado.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/reply-message (1).png"))); // NOI18N
        btn_regresar_empleado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_regresar_empleadoMouseClicked(evt);
            }
        });
        login_empleados.getContentPane().add(btn_regresar_empleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 520, 170, 90));

        fondo_login_empleados.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/login-form-emp.gif"))); // NOI18N
        login_empleados.getContentPane().add(fondo_login_empleados, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 600));

        Perfil_clientes_enLinea.setUndecorated(true);
        Perfil_clientes_enLinea.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_cerrar_sesion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/power.png"))); // NOI18N
        btn_cerrar_sesion.setContentAreaFilled(false);
        btn_cerrar_sesion.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/power (1).png"))); // NOI18N
        btn_cerrar_sesion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_cerrar_sesionMouseClicked(evt);
            }
        });
        Perfil_clientes_enLinea.getContentPane().add(btn_cerrar_sesion, new org.netbeans.lib.awtextra.AbsoluteConstraints(1230, 0, 130, 80));

        siguiente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/next-button.png"))); // NOI18N
        siguiente.setContentAreaFilled(false);
        siguiente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguienteActionPerformed(evt);
            }
        });
        Perfil_clientes_enLinea.getContentPane().add(siguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(1300, 700, -1, -1));

        anterior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/previous.png"))); // NOI18N
        anterior.setContentAreaFilled(false);
        anterior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anteriorActionPerformed(evt);
            }
        });
        Perfil_clientes_enLinea.getContentPane().add(anterior, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 700, -1, -1));

        cb_clienteV.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        cb_clienteV.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una categoria" }));
        cb_clienteV.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_clienteVItemStateChanged(evt);
            }
        });
        Perfil_clientes_enLinea.getContentPane().add(cb_clienteV, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 190, 30));

        tabla_cliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane7.setViewportView(tabla_cliente);

        Perfil_clientes_enLinea.getContentPane().add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 100, 700, 320));

        boton_carrito.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        boton_carrito.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/shopping-cart.png"))); // NOI18N
        boton_carrito.setText("Agregar a carrito");
        boton_carrito.setContentAreaFilled(false);
        boton_carrito.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/shopping-cart (1).png"))); // NOI18N
        boton_carrito.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton_carritoMouseClicked(evt);
            }
        });
        Perfil_clientes_enLinea.getContentPane().add(boton_carrito, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 0, -1, 70));

        verCarrito.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        verCarrito.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add-to-cart_1.png"))); // NOI18N
        verCarrito.setText("Ver Carrito");
        verCarrito.setContentAreaFilled(false);
        verCarrito.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add-to-cart (1).png"))); // NOI18N
        verCarrito.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                verCarritoMouseClicked(evt);
            }
        });
        Perfil_clientes_enLinea.getContentPane().add(verCarrito, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 1, 210, 70));

        jLabel10.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204), 3));
        Perfil_clientes_enLinea.getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 440, 1240, 260));

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        Perfil_clientes_enLinea.getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 0, 800, 480));

        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        Perfil_clientes_enLinea.getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 770, 470));

        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        Perfil_clientes_enLinea.getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 750, 570));

        jLabel15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        Perfil_clientes_enLinea.getContentPane().add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 190, 810, 580));

        administradores.setUndecorated(true);
        administradores.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabbed_eliminar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(51, 0, 204)));
        tabbed_eliminar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabbed_eliminarMouseClicked(evt);
            }
        });

        panel_crear.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabla_crear.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tabla_crear);

        panel_crear.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 580, 220));

        boton_crear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add-user.png"))); // NOI18N
        boton_crear.setToolTipText("");
        boton_crear.setContentAreaFilled(false);
        boton_crear.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/add-user (1).png"))); // NOI18N
        boton_crear.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton_crearMouseClicked(evt);
            }
        });
        panel_crear.add(boton_crear, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 280, 100, 70));

        btn_regresar4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/reply-message.png"))); // NOI18N
        btn_regresar4.setContentAreaFilled(false);
        btn_regresar4.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/reply-message (1).png"))); // NOI18N
        btn_regresar4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_regresar4MouseClicked(evt);
            }
        });
        panel_crear.add(btn_regresar4, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 270, 100, 70));

        cb_crear.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        cb_crear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecciona una tabla", "PRODUCTO", "CLIENTE", "CONTRATO", "CATEGORIA", "TIENE_EN_CARRITO", "CLIENTE_FRECUENTE", "CLIENTE_POCO_FRECUENTE", "DETALLE_FACTURA", "ALMACEN", "INVENTARIO", "ORDEN", "CLIENTE_VIRTUAL", "FACTURA", "TIENDA" }));
        cb_crear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_crearItemStateChanged(evt);
            }
        });
        panel_crear.add(cb_crear, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 160, 30));

        jLabel34.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel34.setText("Regresar");
        panel_crear.add(jLabel34, new org.netbeans.lib.awtextra.AbsoluteConstraints(648, 350, 80, 20));

        jLabel36.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel36.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel36.setText("Insertar");
        panel_crear.add(jLabel36, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 350, 70, 20));

        tabbed_eliminar.addTab("Crear", panel_crear);

        panel_modificar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cb_modificar.setFont(new java.awt.Font("Bell MT", 1, 12)); // NOI18N
        cb_modificar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONE UNA TABLA", "PRODUCTO", "CLIENTE", "CONTRATO", "CATEGORIA", "TIENE_EN_CARRITO", "CLIENTE_FRECUENTE", "CLIENTE_POCO_FRECUENTE", "DETALLE_FACTURA", "ALMACEN", "INVENTARIO", "ORDEN", "CLIENTE_VIRTUAL", "FACTURA", "TIENDA" }));
        cb_modificar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_modificarItemStateChanged(evt);
            }
        });
        panel_modificar.add(cb_modificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 180, 30));

        tabla_modificar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tabla_modificar);

        panel_modificar.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 30, 610, 260));

        btn_modificar_sql.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/order.png"))); // NOI18N
        btn_modificar_sql.setContentAreaFilled(false);
        btn_modificar_sql.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/order (1).png"))); // NOI18N
        btn_modificar_sql.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_modificar_sqlMouseClicked(evt);
            }
        });
        panel_modificar.add(btn_modificar_sql, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 290, 100, 70));

        btn_regresar3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/reply-message.png"))); // NOI18N
        btn_regresar3.setContentAreaFilled(false);
        btn_regresar3.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/reply-message (1).png"))); // NOI18N
        btn_regresar3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_regresar3MouseClicked(evt);
            }
        });
        panel_modificar.add(btn_regresar3, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 290, 80, 60));

        jLabel33.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel33.setText("Regresar");
        panel_modificar.add(jLabel33, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 360, 60, 20));

        jLabel35.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel35.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel35.setText("Modificar");
        panel_modificar.add(jLabel35, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 360, -1, -1));

        tabbed_eliminar.addTab("Modificar", panel_modificar);

        panel_eliminar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        cb_eliminar.setFont(new java.awt.Font("Bell MT", 1, 12)); // NOI18N
        cb_eliminar.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SELECCIONE UNA TABLA", "PRODUCTO", "CLIENTE", "CONTRATO", "CATEGORIA", "TIENE_EN_CARRITO", "CLIENTE_FRECUENTE", "CLIENTE_POCO_FRECUENTE", "DETALLE_FACTURA", "ALMACEN", "INVENTARIO", "ORDEN", "CLIENTE_VIRTUAL", "FACTURA", "TIENDA" }));
        cb_eliminar.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_eliminarItemStateChanged(evt);
            }
        });
        panel_eliminar.add(cb_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 180, 30));

        tabla_eliminar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tabla_eliminar);

        panel_eliminar.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 30, 610, 260));

        jLabel31.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText("Eliminar");
        panel_eliminar.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 360, 90, -1));

        btn_eliminar_sql.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/boton-x.png"))); // NOI18N
        btn_eliminar_sql.setContentAreaFilled(false);
        btn_eliminar_sql.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/boton-x (1).png"))); // NOI18N
        btn_eliminar_sql.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_eliminar_sqlMouseClicked(evt);
            }
        });
        panel_eliminar.add(btn_eliminar_sql, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 290, 90, 70));

        btn_regresar2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/reply-message.png"))); // NOI18N
        btn_regresar2.setContentAreaFilled(false);
        btn_regresar2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/reply-message (1).png"))); // NOI18N
        btn_regresar2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_regresar2MouseClicked(evt);
            }
        });
        panel_eliminar.add(btn_regresar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 290, 90, 70));

        jLabel32.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel32.setText("Regresar");
        panel_eliminar.add(jLabel32, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 360, 60, 20));

        tabbed_eliminar.addTab("Eliminar", panel_eliminar);

        administradores.getContentPane().add(tabbed_eliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, 840, 410));

        btn_ver_bitacora.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        btn_ver_bitacora.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/document.png"))); // NOI18N
        btn_ver_bitacora.setText("Ver bitacora");
        btn_ver_bitacora.setContentAreaFilled(false);
        btn_ver_bitacora.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/document (1).png"))); // NOI18N
        btn_ver_bitacora.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_ver_bitacoraMouseClicked(evt);
            }
        });
        administradores.getContentPane().add(btn_ver_bitacora, new org.netbeans.lib.awtextra.AbsoluteConstraints(690, 450, 180, 90));

        fondo_admiistradores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        administradores.getContentPane().add(fondo_admiistradores, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 540));

        jLabel30.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        jLabel30.setText("jLabel30");
        administradores.getContentPane().add(jLabel30, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 0, 160, 540));

        Perfil_clientes_frecuentes.setUndecorated(true);
        Perfil_clientes_frecuentes.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Perfil_clientes_frecuentes.getContentPane().add(txt_buscar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 20, 180, 30));

        btn_cerrar_sesion1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/power.png"))); // NOI18N
        btn_cerrar_sesion1.setContentAreaFilled(false);
        btn_cerrar_sesion1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/power (1).png"))); // NOI18N
        btn_cerrar_sesion1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_cerrar_sesion1MouseClicked(evt);
            }
        });
        Perfil_clientes_frecuentes.getContentPane().add(btn_cerrar_sesion1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1440, 0, 130, 80));

        btn_buscar_producto1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btn_buscar_producto1.setContentAreaFilled(false);
        btn_buscar_producto1.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search (1).png"))); // NOI18N
        Perfil_clientes_frecuentes.getContentPane().add(btn_buscar_producto1, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 0, 150, 80));

        siguiente1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/next-button.png"))); // NOI18N
        siguiente1.setContentAreaFilled(false);
        siguiente1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguiente1ActionPerformed(evt);
            }
        });
        Perfil_clientes_frecuentes.getContentPane().add(siguiente1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1360, 700, -1, -1));

        anterior1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/previous.png"))); // NOI18N
        anterior1.setContentAreaFilled(false);
        anterior1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anterior1ActionPerformed(evt);
            }
        });
        Perfil_clientes_frecuentes.getContentPane().add(anterior1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 700, -1, -1));

        jLabel16.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204), 3));
        Perfil_clientes_frecuentes.getContentPane().add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 440, 1280, 260));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        Perfil_clientes_frecuentes.getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 0, 800, 480));

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        Perfil_clientes_frecuentes.getContentPane().add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 770, 470));

        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        Perfil_clientes_frecuentes.getContentPane().add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 750, 610));

        jLabel20.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        Perfil_clientes_frecuentes.getContentPane().add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 200, 810, 620));

        jMenu4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/categories.png"))); // NOI18N
        jMenu4.setText("Categorías");
        jMenu4.setMinimumSize(new java.awt.Dimension(100, 70));
        jMenu4.setPreferredSize(new java.awt.Dimension(100, 30));
        jMenu4.setRequestFocusEnabled(false);
        jMenu4.setRolloverEnabled(false);

        jMenuItem7.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/television.png"))); // NOI18N
        jMenuItem7.setText("Smart TV");
        jMenu4.add(jMenuItem7);

        jMenuItem8.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jMenuItem8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/iphone.png"))); // NOI18N
        jMenuItem8.setText("Celulares");
        jMenu4.add(jMenuItem8);

        jMenuItem9.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jMenuItem9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/smart-watch.png"))); // NOI18N
        jMenuItem9.setText("Relojes");
        jMenu4.add(jMenuItem9);

        jMenuItem10.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jMenuItem10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/macbook-pro.png"))); // NOI18N
        jMenuItem10.setText("Computadoras");
        jMenu4.add(jMenuItem10);

        jMenuItem11.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jMenuItem11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/video-camera.png"))); // NOI18N
        jMenuItem11.setText("Cámaras");
        jMenu4.add(jMenuItem11);

        jMenuItem12.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jMenuItem12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ps4.png"))); // NOI18N
        jMenuItem12.setText("Consolas de juego");
        jMenu4.add(jMenuItem12);

        jMenuBar2.add(jMenu4);

        jMenu6.setText("Edit");
        jMenuBar2.add(jMenu6);

        Perfil_clientes_frecuentes.setJMenuBar(jMenuBar2);

        Perfil_clientes_poco_frecuentes.setUndecorated(true);
        Perfil_clientes_poco_frecuentes.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        Perfil_clientes_poco_frecuentes.getContentPane().add(txt_buscar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 20, 180, 30));

        btn_cerrar_sesion2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/power.png"))); // NOI18N
        btn_cerrar_sesion2.setContentAreaFilled(false);
        btn_cerrar_sesion2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/power (1).png"))); // NOI18N
        btn_cerrar_sesion2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_cerrar_sesion2MouseClicked(evt);
            }
        });
        Perfil_clientes_poco_frecuentes.getContentPane().add(btn_cerrar_sesion2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1440, 0, 130, 80));

        btn_buscar_producto2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search.png"))); // NOI18N
        btn_buscar_producto2.setContentAreaFilled(false);
        btn_buscar_producto2.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search (1).png"))); // NOI18N
        Perfil_clientes_poco_frecuentes.getContentPane().add(btn_buscar_producto2, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 0, 150, 80));

        siguiente2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/next-button.png"))); // NOI18N
        siguiente2.setContentAreaFilled(false);
        siguiente2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siguiente2ActionPerformed(evt);
            }
        });
        Perfil_clientes_poco_frecuentes.getContentPane().add(siguiente2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1360, 700, -1, -1));

        anterior2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/previous.png"))); // NOI18N
        anterior2.setContentAreaFilled(false);
        anterior2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                anterior2ActionPerformed(evt);
            }
        });
        Perfil_clientes_poco_frecuentes.getContentPane().add(anterior2, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 700, -1, -1));

        jLabel21.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 204), 3));
        Perfil_clientes_poco_frecuentes.getContentPane().add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 440, 1280, 260));

        jLabel22.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        Perfil_clientes_poco_frecuentes.getContentPane().add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 0, 800, 480));

        jLabel23.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        Perfil_clientes_poco_frecuentes.getContentPane().add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 770, 470));

        jLabel24.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        Perfil_clientes_poco_frecuentes.getContentPane().add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 750, 610));

        jLabel25.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        Perfil_clientes_poco_frecuentes.getContentPane().add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 200, 810, 620));

        jMenu5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/categories.png"))); // NOI18N
        jMenu5.setText("Categorías");
        jMenu5.setMinimumSize(new java.awt.Dimension(100, 70));
        jMenu5.setPreferredSize(new java.awt.Dimension(100, 30));
        jMenu5.setRequestFocusEnabled(false);
        jMenu5.setRolloverEnabled(false);

        jMenuItem13.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jMenuItem13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/television.png"))); // NOI18N
        jMenuItem13.setText("Smart TV");
        jMenu5.add(jMenuItem13);

        jMenuItem14.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jMenuItem14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/iphone.png"))); // NOI18N
        jMenuItem14.setText("Celulares");
        jMenu5.add(jMenuItem14);

        jMenuItem15.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jMenuItem15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/smart-watch.png"))); // NOI18N
        jMenuItem15.setText("Relojes");
        jMenu5.add(jMenuItem15);

        jMenuItem16.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jMenuItem16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/macbook-pro.png"))); // NOI18N
        jMenuItem16.setText("Computadoras");
        jMenu5.add(jMenuItem16);

        jMenuItem17.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jMenuItem17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/video-camera.png"))); // NOI18N
        jMenuItem17.setText("Cámaras");
        jMenu5.add(jMenuItem17);

        jMenuItem18.setFont(new java.awt.Font("Calibri", 1, 18)); // NOI18N
        jMenuItem18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/ps4.png"))); // NOI18N
        jMenuItem18.setText("Consolas de juego");
        jMenu5.add(jMenuItem18);

        jMenuBar3.add(jMenu5);

        jMenu7.setText("Edit");
        jMenuBar3.add(jMenu7);

        Perfil_clientes_poco_frecuentes.setJMenuBar(jMenuBar3);

        jTextField3.setEditable(false);
        jTextField3.setBackground(new java.awt.Color(255, 204, 0));
        jTextField3.setAutoscrolls(false);
        jTextField3.setBorder(null);

        perfil_empleados.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_cerrar_sesion_empleado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/power.png"))); // NOI18N
        btn_cerrar_sesion_empleado.setToolTipText("");
        btn_cerrar_sesion_empleado.setContentAreaFilled(false);
        btn_cerrar_sesion_empleado.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/power (1).png"))); // NOI18N
        btn_cerrar_sesion_empleado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_cerrar_sesion_empleadoMouseClicked(evt);
            }
        });
        perfil_empleados.getContentPane().add(btn_cerrar_sesion_empleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 20, 120, 70));

        tabla_empleado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(tabla_empleado);

        perfil_empleados.getContentPane().add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, 870, 230));

        cb_almacen.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione una opción", "Insertar Orden", "Actualizar Inventario", "Ver Orden" }));
        cb_almacen.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cb_almacenItemStateChanged(evt);
            }
        });
        perfil_empleados.getContentPane().add(cb_almacen, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 60, 140, 40));
        perfil_empleados.getContentPane().add(jLabel28, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 450));

        boton_insertarE.setText("Insertar");
        boton_insertarE.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton_insertarEMouseClicked(evt);
            }
        });
        perfil_empleados.getContentPane().add(boton_insertarE, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 460, -1, -1));

        login_admin.setUndecorated(true);
        login_admin.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_ingresar_admin.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        btn_ingresar_admin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/user.png"))); // NOI18N
        btn_ingresar_admin.setText("Login");
        btn_ingresar_admin.setContentAreaFilled(false);
        btn_ingresar_admin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_ingresar_adminMouseClicked(evt);
            }
        });
        login_admin.getContentPane().add(btn_ingresar_admin, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 210, 150, 50));

        btn_regresar_loginAdmin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/previous.png"))); // NOI18N
        btn_regresar_loginAdmin.setContentAreaFilled(false);
        btn_regresar_loginAdmin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_regresar_loginAdminMouseClicked(evt);
            }
        });
        login_admin.getContentPane().add(btn_regresar_loginAdmin, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 250, 80, 70));

        password_admin.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        login_admin.getContentPane().add(password_admin, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 150, 410, 30));

        jTextField1.setBackground(new java.awt.Color(0, 255, 255));
        jTextField1.setBorder(null);
        login_admin.getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 200, 110, 60));

        user_admin.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        login_admin.getContentPane().add(user_admin, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 100, 410, 30));

        jLabel29.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel29.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel29.setText("Admin Login");
        login_admin.getContentPane().add(jLabel29, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 40, 240, 60));

        fondo_login_admin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/login2.gif"))); // NOI18N
        login_admin.getContentPane().add(fondo_login_admin, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 600, 320));

        crear_cuenta_cliente.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel37.setText("jLabel37");
        crear_cuenta_cliente.getContentPane().add(jLabel37, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 20, 120, 30));

        id_registrar_cliente.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        id_registrar_cliente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        crear_cuenta_cliente.getContentPane().add(id_registrar_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 160, 30));

        nombre_registrar_cliente.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        nombre_registrar_cliente.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        crear_cuenta_cliente.getContentPane().add(nombre_registrar_cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 130, 160, 30));
        crear_cuenta_cliente.getContentPane().add(btn_siguiente, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 270, 100, 30));

        cmb_tipoCliente.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        cmb_tipoCliente.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Con contrato", "En línea", "Normal" }));
        crear_cuenta_cliente.getContentPane().add(cmb_tipoCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(180, 210, 130, 30));

        btn_regresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_regresarMouseClicked(evt);
            }
        });
        crear_cuenta_cliente.getContentPane().add(btn_regresar, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 270, 90, 30));

        jLabel38.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jLabel38.setText("Selecciona que tipo de cliente quieres ser ");
        crear_cuenta_cliente.getContentPane().add(jLabel38, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 170, 280, 30));
        crear_cuenta_cliente.getContentPane().add(fondo_registro_clientes, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 320));

        cliente_en_linea.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabla_carrito.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane8.setViewportView(tabla_carrito);

        cliente_en_linea.getContentPane().add(jScrollPane8, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 160, 520, 150));

        salirCliente.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        salirCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/previous.png"))); // NOI18N
        salirCliente.setText("Regresar");
        salirCliente.setContentAreaFilled(false);
        salirCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                salirClienteMouseClicked(evt);
            }
        });
        cliente_en_linea.getContentPane().add(salirCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(1070, 390, -1, -1));

        comprarCliente.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        comprarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/payment-method.png"))); // NOI18N
        comprarCliente.setText("Comprar");
        comprarCliente.setContentAreaFilled(false);
        comprarCliente.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/payment-method (1).png"))); // NOI18N
        comprarCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                comprarClienteMouseClicked(evt);
            }
        });
        cliente_en_linea.getContentPane().add(comprarCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 200, 180, 80));

        tabla_fac.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tabla_fac.setEnabled(false);
        jScrollPane9.setViewportView(tabla_fac);

        cliente_en_linea.getContentPane().add(jScrollPane9, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 160, 490, 150));

        jLabel43.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        jLabel43.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel43.setText("Tus facturas");
        cliente_en_linea.getContentPane().add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 70, -1, -1));

        jLabel44.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        jLabel44.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel44.setText("En carreta");
        cliente_en_linea.getContentPane().add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 70, -1, -1));

        jLabel47.setFont(new java.awt.Font("Bell MT", 1, 36)); // NOI18N
        jLabel47.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel47.setText("Realizando compra");
        cliente_en_linea.getContentPane().add(jLabel47, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 10, -1, -1));

        jLabel39.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        cliente_en_linea.getContentPane().add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(-70, 0, 670, 470));

        jLabel48.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        jLabel48.setText("jLabel48");
        cliente_en_linea.getContentPane().add(jLabel48, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 0, 670, 470));

        ServicioAlCliente.setUndecorated(true);
        ServicioAlCliente.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        ServicioAlCliente.getContentPane().add(txt_busqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 70, 150, 30));

        btn_regresar_servicio.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/reply-message.png"))); // NOI18N
        btn_regresar_servicio.setContentAreaFilled(false);
        btn_regresar_servicio.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_regresar_servicioMouseClicked(evt);
            }
        });
        ServicioAlCliente.getContentPane().add(btn_regresar_servicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 530, 50, 40));

        jLabel2.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Servicio al cliente");
        ServicioAlCliente.getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 30, 240, 30));

        btn_busqueda.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search (2).png"))); // NOI18N
        btn_busqueda.setContentAreaFilled(false);
        btn_busqueda.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_busquedaMouseClicked(evt);
            }
        });
        ServicioAlCliente.getContentPane().add(btn_busqueda, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 50, 90, 60));

        tabla_servicio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tabla_servicio.setEnabled(false);
        jScrollPane4.setViewportView(tabla_servicio);

        ServicioAlCliente.getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 370, 820, 170));

        fondo_servicioAlCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/clientservices.gif"))); // NOI18N
        ServicioAlCliente.getContentPane().add(fondo_servicioAlCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, 440));

        jLabel41.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/clientservices.gif"))); // NOI18N
        ServicioAlCliente.getContentPane().add(jLabel41, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 900, 450));

        centrode_llamadas.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton2.setText("jButton2");
        centrode_llamadas.getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 90, 80, 30));

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(jTable5);

        centrode_llamadas.getContentPane().add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 150, 830, 310));

        jTextField2.setText("jTextField2");
        centrode_llamadas.getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 90, 110, 30));

        fondo_centroLlamadas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo_clientes1.gif"))); // NOI18N
        centrode_llamadas.getContentPane().add(fondo_centroLlamadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 800, 600));

        jLabel42.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/fondo_clientes1.gif"))); // NOI18N
        centrode_llamadas.getContentPane().add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 0, 530, 600));

        ventana_bitacora.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabla_bitacora.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204)));
        tabla_bitacora.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane10.setViewportView(tabla_bitacora);

        ventana_bitacora.getContentPane().add(jScrollPane10, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 60, 930, 390));

        jLabel45.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        jLabel45.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel45.setText("Bitacora");
        ventana_bitacora.getContentPane().add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 30, 140, 20));

        jButton1.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/previous.png"))); // NOI18N
        jButton1.setText("Volver al crud");
        jButton1.setContentAreaFilled(false);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        ventana_bitacora.getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 470, 200, 70));

        jLabel46.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        jLabel46.setText("jLabel44");
        ventana_bitacora.getContentPane().add(jLabel46, new org.netbeans.lib.awtextra.AbsoluteConstraints(800, 0, 270, 580));

        btn_regresar_tabbed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget.gif"))); // NOI18N
        ventana_bitacora.getContentPane().add(btn_regresar_tabbed, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 580));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        titulo.setFont(new java.awt.Font("Bell MT", 1, 36)); // NOI18N
        titulo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo.setText("¡Bienvenidos a tienda electronica!");
        getContentPane().add(titulo, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 70, 550, 30));

        boton_salir.setFont(new java.awt.Font("Bell MT", 1, 12)); // NOI18N
        boton_salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/exit (2).png"))); // NOI18N
        boton_salir.setContentAreaFilled(false);
        boton_salir.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/exit (3).png"))); // NOI18N
        boton_salir.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton_salirMouseClicked(evt);
            }
        });
        getContentPane().add(boton_salir, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 510, 230, 140));

        jLabel40.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel40.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel40.setText("DBMA");
        getContentPane().add(jLabel40, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 330, 90, 20));

        jLabel1.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel1.setText("Empleado");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 320, 90, 40));

        jLabel7.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        jLabel7.setText("Hora actual");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 700, 100, 30));

        btn_admin.setFont(new java.awt.Font("Bell MT", 1, 14)); // NOI18N
        btn_admin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/usuario.png"))); // NOI18N
        btn_admin.setContentAreaFilled(false);
        btn_admin.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/usuario (1).png"))); // NOI18N
        btn_admin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_adminMouseClicked(evt);
            }
        });
        getContentPane().add(btn_admin, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 200, 260, 160));

        hora_jbl.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        hora_jbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hora_jbl.setText("00:00:00");
        getContentPane().add(hora_jbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 730, 110, 40));

        titulo2.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        titulo2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titulo2.setText("¿Qué eres?");
        getContentPane().add(titulo2, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 170, 140, 40));

        boton_empleado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/employee (1).png"))); // NOI18N
        boton_empleado.setContentAreaFilled(false);
        boton_empleado.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/employee (2).png"))); // NOI18N
        boton_empleado.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton_empleadoMouseClicked(evt);
            }
        });
        getContentPane().add(boton_empleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 220, 180, 120));

        boton_Cliente.setFont(new java.awt.Font("Bell MT", 1, 18)); // NOI18N
        boton_Cliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/privado (1).png"))); // NOI18N
        boton_Cliente.setText("Cliente Virtual");
        boton_Cliente.setContentAreaFilled(false);
        boton_Cliente.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/privado (2).png"))); // NOI18N
        boton_Cliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boton_ClienteMouseClicked(evt);
            }
        });
        getContentPane().add(boton_Cliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 370, 310, 160));

        fondo_princiipal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget2.gif"))); // NOI18N
        getContentPane().add(fondo_princiipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 910, 590));

        fondo_principal2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget2.gif"))); // NOI18N
        getContentPane().add(fondo_principal2, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 0, 820, 590));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget2.gif"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 880, 800));

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget2.gif"))); // NOI18N
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, -150, 1030, 1100));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget2.gif"))); // NOI18N
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 0, 860, 940));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/electronicgadget2.gif"))); // NOI18N
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 860, 880));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void boton_salirMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton_salirMouseClicked
        System.exit(0);
    }//GEN-LAST:event_boton_salirMouseClicked

    private void boton_empleadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton_empleadoMouseClicked
        TextPrompt e1 = new TextPrompt("Username", user_empleado);
        TextPrompt e2 = new TextPrompt("Password", password_empleado);
        login_empleados.pack();
        login_empleados.setModal(true);
        login_empleados.setLocationRelativeTo(null);
        login_empleados.setVisible(true);
    }//GEN-LAST:event_boton_empleadoMouseClicked

    private void btn_regresar_empleadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_regresar_empleadoMouseClicked
        login_empleados.dispose();
    }//GEN-LAST:event_btn_regresar_empleadoMouseClicked

    private void btn_regresarClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_regresarClienteMouseClicked
        login_clientes.dispose();
    }//GEN-LAST:event_btn_regresarClienteMouseClicked

    private void siguienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguienteActionPerformed
        if (contImages == 4) {
            contImages = 0;
        }
        contImages++;
        jLabel10.setIcon(Imagen[contImages]);
    }//GEN-LAST:event_siguienteActionPerformed

    private void btn_adminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_adminMouseClicked

        TextPrompt j1 = new TextPrompt("Username", user_admin);
        TextPrompt j2 = new TextPrompt("Password", password_admin);
//        login_admin.pack();
//        login_admin.setModal(true);
//        login_admin.setLocationRelativeTo(null);
//        login_admin.setVisible(true);

        ////////////////////////
        tabla_crear.setModel(new DefaultTableModel());

        administradores.pack();
        administradores.setModal(true);
        administradores.setLocationRelativeTo(null);
        administradores.setVisible(true);


    }//GEN-LAST:event_btn_adminMouseClicked

    private void btn_regresar2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_regresar2MouseClicked
        administradores.dispose();
    }//GEN-LAST:event_btn_regresar2MouseClicked

    private void btn_regresar3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_regresar3MouseClicked
        //administradores.dispose();
        administradores.setVisible(false);
    }//GEN-LAST:event_btn_regresar3MouseClicked

    private void btn_regresar4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_regresar4MouseClicked
        administradores.dispose();
    }//GEN-LAST:event_btn_regresar4MouseClicked


    private void cb_crearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_crearItemStateChanged
        // TODO add your handling code here:
        tabla_crear.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel) tabla_crear.getModel();
        flagAddRow = true;
        llenarTabla(model, cb_crear);

    }//GEN-LAST:event_cb_crearItemStateChanged

    private void boton_crearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton_crearMouseClicked
        // TODO add your handling code here:
        boolean idExistente = true;
        DefaultTableModel model = (DefaultTableModel) tabla_crear.getModel();
        if (validarIngresoTable(tabla_crear, false)) {
            Object k = new Object[arregloAtributos.length];
            model.addRow((Object[]) k);
        }
        tabla_crear.setEnabled(false);
        Connection con = conectarBase.getConexion();

        String guardar = "";
        for (int j = 0; j < model.getColumnCount(); j++) {
            guardar += model.getValueAt(0, j).toString() + "%";
        }

        String[] tokens = guardar.split("%");
        PreparedStatement ps;

        switch ((String) cb_crear.getSelectedItem()) {
            case "PRODUCTO": {

                //ps.setInt(1, Integer.parseInt(tokens[0]));
//            ps.setString(1, tokens[1]);
//            ps.setString(2, tokens[2]);
//            ps.setString(3, tokens[3]);
//            ps.setFloat(4, Float.parseFloat(tokens[4]));
//            ps.setString(5, tokens[5]);
//            ps.setString(6, tokens[6]);
                try {
                    ps = con.prepareStatement("INSERT INTO producto (fabricante, nombreProducto, modelo, precio, tipoProducto, descripcion) VALUES (?,?,?,?,?,?)");
                    for (int i = 1; i < tokens.length; i++) {
                        if (i == 4) {
                            ps.setFloat(i, Float.parseFloat(tokens[i]));
                        } else {

                            ps.setString(i, tokens[i]);
                        }

                    }
                    ps.executeUpdate();
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }

                break;
            }
            case "CLIENTE": {/////////////////////////////
                try {
                    ps = con.prepareStatement("INSERT INTO cliente (nombreCliente) VALUES (?)");
                    ps.setString(1, tokens[1]);
                    ps.executeUpdate();
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
            case "CONTRATO": {/////////////////////////////

                String acum = "";
                String query = "SELECT * FROM cliente";
                Statement st;
                try {
                    st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        acum += rs.getInt("idCliente") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (acum.contains(tokens[2])) {
                    try {
                        ps = con.prepareStatement("INSERT INTO contrato (cuota, idCliente) VALUES (?,?)");
                        for (int i = 1; i < tokens.length; i++) {
                            ps.setInt(i, Integer.parseInt(tokens[i]));

                        }
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No existe un cliente con ese id");
                    cb_crear.setSelectedIndex(0);
                    tabla_crear.setModel(new DefaultTableModel());
                    tabla_crear.setEnabled(true);
                    idExistente = false;
                }
                break;
            }

            case "CATEGORIA": {

                String acum = "";
                String query = "SELECT * FROM producto";
                Statement st;
                try {
                    st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        acum += rs.getInt("idProducto") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (acum.contains(tokens[0])) {
                    try {
                        ps = con.prepareStatement("INSERT INTO categoria (idProducto, nombreCategoria) VALUES (?,?)");
                        ps.setInt(1, Integer.parseInt(tokens[0]));
                        ps.setString(2, tokens[1]);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No existe un producto con ese id");
                    cb_crear.setSelectedIndex(0);
                    tabla_crear.setModel(new DefaultTableModel());
                    tabla_crear.setEnabled(true);
                    idExistente = false;
                }
                break;
            }
            case "TIENE_EN_CARRITO": {/////////
                String acum = "";
                String query = "SELECT * FROM producto";
                Statement st;
                try {
                    st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        acum += rs.getInt("idProducto") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (acum.contains(tokens[1])) {
                    try {
                        ps = con.prepareStatement("INSERT INTO tiene_en_carrito (nombreUsuario, idProducto, cantidadProductoCarrito) VALUES (?,?,?)");
                        ps.setString(1, tokens[0]);
                        ps.setInt(2, Integer.parseInt(tokens[1]));
                        ps.setString(3, tokens[2]);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No existe un producto con ese id");
                    cb_crear.setSelectedIndex(0);
                    tabla_crear.setModel(new DefaultTableModel());
                    tabla_crear.setEnabled(true);
                    idExistente = false;
                }
                break;
            }
            case "CLIENTE_FRECUENTE": {
                String acum = "";
                String acumCon = "";
                String query = "SELECT * FROM cliente";
                Statement st;
                try {
                    st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        acum += rs.getInt("idCliente") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                String queryCon = "SELECT * FROM contrato";
                Statement stCon;
                try {
                    stCon = con.createStatement();
                    ResultSet rs = stCon.executeQuery(queryCon);
                    while (rs.next()) {
                        acumCon += rs.getInt("numCuenta") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (acum.contains(tokens[0]) && acumCon.contains(tokens[2])) {
                    try {
                        ps = con.prepareStatement("INSERT INTO cliente_frecuente (idCliente, nombreCliente, numCuenta) VALUES (?,?,?)");
                        ps.setInt(1, Integer.parseInt(tokens[0]));
                        ps.setString(2, tokens[1]);
                        ps.setInt(3, Integer.parseInt(tokens[2]));
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No existe un producto o contrato con ese id");
                    cb_crear.setSelectedIndex(0);
                    tabla_crear.setModel(new DefaultTableModel());
                    tabla_crear.setEnabled(true);
                    idExistente = false;
                }
                break;
            }
            case "CLIENTE_POCO_FRECUENTE": {
                String acum = "";
                String query = "SELECT * FROM cliente";
                Statement st;
                try {
                    st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        acum += rs.getInt("idCliente") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (acum.contains(tokens[0])) {
                    try {
                        ps = con.prepareStatement("INSERT INTO cliente_poco_frecuente (idCliente, nombreCliente) VALUES (?,?)");
                        ps.setInt(1, Integer.parseInt(tokens[0]));
                        ps.setString(2, tokens[1]);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No existe un producto con ese id");
                    cb_crear.setSelectedIndex(0);
                    tabla_crear.setModel(new DefaultTableModel());
                    tabla_crear.setEnabled(true);
                    idExistente = false;
                }
                break;
            }
            case "DETALLE_FACTURA": {/////////////////////////////////////////////////////////////
                String acum = "";
                String acumCon = "";
                String query = "SELECT * FROM factura";
                Statement st;
                try {
                    st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        acum += rs.getInt("noFactura") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                String queryCon = "SELECT * FROM producto";
                Statement stCon;
                try {
                    stCon = con.createStatement();
                    ResultSet rs = stCon.executeQuery(queryCon);
                    while (rs.next()) {
                        acumCon += rs.getInt("idProducto") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (acum.contains(tokens[0]) && acumCon.contains(tokens[1])) {
                    try {
                        ps = con.prepareStatement("INSERT INTO detalle_factura (noFactura, idProducto, cantidadProducto, ISV) VALUES (?,?,?,?)");
                        ps.setInt(1, Integer.parseInt(tokens[0]));
                        ps.setInt(2, Integer.parseInt(tokens[1]));
                        ps.setInt(3, Integer.parseInt(tokens[2]));
                        ps.setFloat(4, Float.parseFloat(tokens[3]));
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No existe un producto o factura con ese id");
                    cb_crear.setSelectedIndex(0);
                    tabla_crear.setModel(new DefaultTableModel());
                    tabla_crear.setEnabled(true);
                    idExistente = false;
                }
                break;
            }
            case "ALMACEN": {//*******************************/////////////////////////////////////////////////
                try {
                    ps = con.prepareStatement("INSERT INTO almacen (ciudad) VALUES (?)");
                    ps.setString(1, tokens[0]);
                    ps.executeUpdate();
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
            case "INVENTARIO": {//////////////////////////////////////////////////////////////////
                String acum = "";
                String acumCon = "";
                String query = "SELECT * FROM almacen";
                Statement st;
                try {
                    st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        acum += rs.getInt("codigoAlmacen") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                String acumTien = "";
                String query3 = "SELECT * FROM tienda";
                Statement sta;
                try {
                    sta = con.createStatement();
                    ResultSet rs = sta.executeQuery(query3);
                    while (rs.next()) {
                        acumTien += rs.getInt("codigoTienda") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                String queryCon = "SELECT * FROM producto";
                Statement stCon;
                try {
                    stCon = con.createStatement();
                    ResultSet rs = stCon.executeQuery(queryCon);
                    while (rs.next()) {
                        acumCon += rs.getInt("idProducto") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (acum.contains(tokens[0]) && acumCon.contains(tokens[2]) && acumTien.contains(tokens[1])) {
                    try {
                        ps = con.prepareStatement("INSERT INTO inventario (codigoAlmacen, codigoTienda, idProducto,cantidadInventario) VALUES (?,?,?,?)");
                        for (int i = 1; i < 5; i++) {
                            ps.setInt(i, Integer.parseInt(tokens[i - 1]));

                        }
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No existe un producto, almacen o tienda con ese id");
                    cb_crear.setSelectedIndex(0);
                    tabla_crear.setModel(new DefaultTableModel());
                    tabla_crear.setEnabled(true);
                    idExistente = false;
                }
                break;
            }
            case "ORDEN": {//************
                String acum = "";
                String query = "SELECT * FROM cliente";
                Statement st;
                try {
                    st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        acum += rs.getInt("idCliente") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (acum.contains(tokens[1])) {
                    try {
                        ps = con.prepareStatement("INSERT INTO orden (idCliente,nombreRemitente, empresaEnvio, direccionEnvio, noSeguimiento) VALUES (?,?,?,?,?)");
                        ps.setInt(1, Integer.parseInt(tokens[1]));
                        ps.setString(2, tokens[2]);
                        ps.setString(3, tokens[3]);
                        ps.setString(4, tokens[4]);
                        ps.setInt(5, Integer.parseInt(tokens[5]));
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No existe un cliente con ese id");
                    cb_crear.setSelectedIndex(0);
                    tabla_crear.setModel(new DefaultTableModel());
                    tabla_crear.setEnabled(true);
                    idExistente = false;
                }
                break;
            }
            case "CLIENTE_VIRTUAL": {///////////////////////////////
                String acum = "";
                String query = "SELECT * FROM cliente";
                Statement st;
                try {
                    st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        acum += rs.getInt("idCliente") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (acum.contains(tokens[0])) {
                    try {
                        ps = con.prepareStatement("INSERT INTO cliente_virtual (idCliente,direccionFacturacion, nombreUsuario, password, numeroTarjeta, tarjetahabiente, mesVencimiento, yearVencimiento, codigoSeguridad) VALUES (?,?,?,?,?,?,?,?,?)");
                        for (int i = 1; i <= tokens.length; i++) {
                            if (i == 5 || i == 1) {
                                ps.setInt(i, Integer.parseInt(tokens[i - 1]));
                            } else {
                                ps.setString(i, tokens[i - 1]);

                            }
                        }
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No existe un cliente con ese id");
                    cb_crear.setSelectedIndex(0);
                    tabla_crear.setModel(new DefaultTableModel());
                    tabla_crear.setEnabled(true);
                    idExistente = false;
                }
                break;
            }
            case "FACTURA": {
                String acum = "";
                String acumCon = "";
                String query = "SELECT * FROM tienda";
                Statement st;
                try {
                    st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        acum += rs.getInt("codigoTienda") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                String queryCon = "SELECT * FROM cliente";
                Statement stCon;
                try {
                    stCon = con.createStatement();
                    ResultSet rs = stCon.executeQuery(queryCon);
                    while (rs.next()) {
                        acumCon += rs.getInt("idCliente") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }

                if (acum.contains(tokens[1]) && acumCon.contains(tokens[5])) {
                    try {
                        ps = con.prepareStatement("INSERT INTO factura (codigoTienda, direccion, rtn, fechaEmision, idCliente, total_venta) VALUES (?,?,?,?,?,?)");
                        ps.setInt(1, Integer.parseInt(tokens[1]));
                        ps.setString(2, tokens[2]);
                        ps.setString(3, tokens[3]);
                        ps.setString(4, tokens[4]);
                        ps.setInt(5, Integer.parseInt(tokens[5]));
                        ps.setFloat(6, Float.parseFloat(tokens[6]));
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {
                    JOptionPane.showMessageDialog(null, "No existe un tienda o cliente con ese id");
                    cb_crear.setSelectedIndex(0);
                    tabla_crear.setModel(new DefaultTableModel());
                    tabla_crear.setEnabled(true);
                    idExistente = false;
                }
                break;
            }
            case "TIENDA": {
                try {
                    ps = con.prepareStatement("INSERT INTO tienda (ubicacion) VALUES (?)");
                    ps.setString(1, tokens[1]);

                    ps.executeUpdate();
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
        }
        if (idExistente) {
            JOptionPane.showMessageDialog(null, "Dato insertado correctamente");

        }

//        try {
//
//            Connection con = conectarBase.getConexion();
//
//            PreparedStatement ps = con.prepareStatement("INSERT INTO cliente (idCliente, nombreCliente) VALUES (?,?)");
//
//            ps.setInt(1, id);
//
//            ps.setString(2, nombreCliente);
//            String matricula = this.txt_Matricula.getText();
//            String nombre = this.txt_nombre.getText();
//            int edad = Integer.parseInt(txt_edad.getText());
//            String email = txt_email.getText();
//
//            try {
//                Connection con = conection.getConexion();
//                PreparedStatement ps = con.prepareStatement("INSERT INTO alumnos (matricula, nombre, email, edad,activo) VALUES (?,?,?,?,?)");
//                ps.setString(1, matricula);
//                ps.setString(2, nombre);
//                ps.setString(3, email);
//                ps.setInt(4, edad);
//                ps.setInt(5, 1);
//                ps.executeUpdate();
//                JOptionPane.showMessageDialog(null, "Registro guardado");
//            } catch (HeadlessException | SQLException e) {
//                JOptionPane.showMessageDialog(null, e);
//            }

    }//GEN-LAST:event_boton_crearMouseClicked

    private void tabbed_eliminarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabbed_eliminarMouseClicked
        // TODO add your handling code here:
        tabla_crear.setModel(new DefaultTableModel());
        tabla_crear.setEnabled(true);
        tabla_modificar.setModel(new DefaultTableModel());
        tabla_modificar.setEnabled(true);
        tabla_eliminar.setModel(new DefaultTableModel());
        cb_crear.setSelectedIndex(0);
        cb_modificar.setSelectedIndex(0);
        cb_eliminar.setSelectedIndex(0);

        //tabla_eliminar.getCellEditor().cancelCellEditing();

    }//GEN-LAST:event_tabbed_eliminarMouseClicked
    private void btn_cerrar_sesionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_cerrar_sesionMouseClicked
        Perfil_clientes_enLinea.dispose();

    }//GEN-LAST:event_btn_cerrar_sesionMouseClicked

    private void btn_cerrar_sesion1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_cerrar_sesion1MouseClicked
        Perfil_clientes_frecuentes.dispose();
    }//GEN-LAST:event_btn_cerrar_sesion1MouseClicked

    private void siguiente1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguiente1ActionPerformed
        if (contImages == 4) {
            contImages = 0;
        }
        contImages++;
        jLabel10.setIcon(Imagen[contImages]);
    }//GEN-LAST:event_siguiente1ActionPerformed

    private void anterior1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anterior1ActionPerformed
        if (contImages == 1) {
            contImages = 4;
        }
        contImages--;
        jLabel10.setIcon(Imagen[contImages]);
    }//GEN-LAST:event_anterior1ActionPerformed
    int id_ingresado;
    private void btn_ingresarClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_ingresarClienteMouseClicked
        ArrayList<String> cliente = new ArrayList();
        ArrayList<String> pass = new ArrayList();
        ArrayList<Integer> id = new ArrayList();

        Connection con2 = conectarBase.getConexion();
        String query2 = "SELECT * FROM cliente_virtual";
        Statement st2;
        try {
            st2 = con2.createStatement();
            ResultSet rs = st2.executeQuery(query2);
            while (rs.next()) {
                cliente.add(rs.getString("nombreUsuario"));
                pass.add(rs.getString("password"));
                id.add(rs.getInt("idCliente"));

            }
        } catch (SQLException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        boolean ser = false;
        if (!(id_login_cliente.getText().isEmpty() || password_login_cliente.getText().isBlank())) {
            for (int i = 0; i < cliente.size(); i++) {
                if (id_login_cliente.getText().equals(cliente.get(i)) && password_login_cliente.getText().equals(pass.get(i))) {
                    ser = true;
                    cliente_ingresado = cliente.get(i);
                    id_ingresado = id.get(i);
                    break;
                }
            }

            if (ser == true) {
                id_login_cliente.setText("");

                password_login_cliente.setText("");
                Connection con = conectarBase.getConexion();
                String query = "SELECT * FROM categoria";
                Statement st;

                ArrayList<Object> row = new ArrayList();
                try {
                    st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        row.add(rs.getString("nombreCategoria"));
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                for (int i = 0; i < row.size(); i++) {
                    cb_clienteV.addItem((String) row.get(i));
                }
                login_clientes.setVisible(false);
                Perfil_clientes_enLinea.pack();
                Perfil_clientes_enLinea.setModal(true);
                Perfil_clientes_enLinea.setLocationRelativeTo(null);
                Perfil_clientes_enLinea.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(null, "Usuario o contraseña incorrecta");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Llene los campos");
        }


    }//GEN-LAST:event_btn_ingresarClienteMouseClicked
    String cliente_ingresado;
    private void btn_cerrar_sesion2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_cerrar_sesion2MouseClicked
        Perfil_clientes_poco_frecuentes.dispose();
    }//GEN-LAST:event_btn_cerrar_sesion2MouseClicked

    private void siguiente2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siguiente2ActionPerformed
        if (contImages == 4) {
            contImages = 0;
        }
        contImages++;
        jLabel10.setIcon(Imagen[contImages]);
    }//GEN-LAST:event_siguiente2ActionPerformed

    private void anterior2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anterior2ActionPerformed
        if (contImages == 1) {
            contImages = 4;
        }
        contImages--;
        jLabel10.setIcon(Imagen[contImages]);
    }//GEN-LAST:event_anterior2ActionPerformed

    private void btn_cerrar_sesion_empleadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_cerrar_sesion_empleadoMouseClicked
        perfil_empleados.dispose();
    }//GEN-LAST:event_btn_cerrar_sesion_empleadoMouseClicked

    private void btn_login_empleadoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_login_empleadoMouseClicked

        String userr = user_empleado.getText();
        String pass = password_empleado.getText();
        boolean ser = false, llam = false, emp = false;
        TextPrompt l1 = new TextPrompt("¿Que estás buscando?", txt_busqueda);
        if (!(userr.isEmpty() || pass.isBlank())) {
            for (int i = 0; i < servicioUsuario.size(); i++) {
                for (int j = 0; j < servicioPassword.size(); j++) {
                    if (userr.equals(servicioUsuario.get(i)) && pass.equals(servicioPassword.get(i))) {
                        ser = true;
                        break;
                    }
                }
            }

            if (ser == true) {
                user_empleado.setText("");

                password_empleado.setText("");
                login_empleados.dispose();
                ServicioAlCliente.pack();
                ServicioAlCliente.setModal(true);
                ServicioAlCliente.setLocationRelativeTo(null);
                ServicioAlCliente.setVisible(true);
            }

            for (int i = 0; i < llamadasUser.size(); i++) {
                for (int j = 0; j < llamadasPassword.size(); j++) {
                    if (userr.equals(llamadasUser.get(i)) && pass.equals(llamadasPassword.get(i))) {
                        llam = true;
                        break;
                    }

                }

            }

            if (llam == true) {
                user_empleado.setText("");

                password_empleado.setText("");
                login_empleados.dispose();
                centrode_llamadas.pack();
                centrode_llamadas.setModal(true);
                centrode_llamadas.setLocationRelativeTo(null);
                centrode_llamadas.setVisible(true);
            }

            for (int i = 0; i < EmpleadosUser.size(); i++) {
                for (int j = 0; j < EmpleadosPassword.size(); j++) {
                    if (userr.equals(EmpleadosUser.get(i)) && pass.equals(EmpleadosPassword.get(i))) {
                        emp = true;
                        break;
                    }

                }
            }
            if (emp == true) {
                user_empleado.setText("");
                password_empleado.setText("");
                login_empleados.dispose();
                perfil_empleados.pack();
                perfil_empleados.setModal(true);
                perfil_empleados.setLocationRelativeTo(null);
                perfil_empleados.setVisible(true);
            }

            if (ser == false && llam == false && emp == false) {
                JOptionPane.showMessageDialog(null, "Dato no encontrado");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Campos vacíos");
        }


    }//GEN-LAST:event_btn_login_empleadoMouseClicked

    private void btn_regresar_loginAdminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_regresar_loginAdminMouseClicked
        login_admin.dispose();
    }//GEN-LAST:event_btn_regresar_loginAdminMouseClicked

    private void btn_ingresar_adminMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_ingresar_adminMouseClicked

        String userr = user_admin.getText();
        String pass = password_admin.getText();
        boolean ad = false;
        if (!(userr.isEmpty() || pass.isEmpty())) {

            for (int i = 0; i < ADMINSUSER.size(); i++) {
                for (int j = 0; j < ADMINPASS.size(); j++) {
                    if (userr.equals(ADMINSUSER.get(i)) && pass.equals(ADMINPASS.get(i))) {
                        ad = true;
                        break;
                    }
                }
            }
            if (ad == true) {
                login_admin.dispose();
                administradores.pack();
                administradores.setModal(true);
                administradores.setLocationRelativeTo(null);
                administradores.setVisible(true);

            } else {
                JOptionPane.showMessageDialog(null, "Datos incorrectos");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Campo/s vacíos");
        }

    }//GEN-LAST:event_btn_ingresar_adminMouseClicked

    private void btn_crear_clienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_crear_clienteMouseClicked
        TextPrompt p1 = new TextPrompt("Crea un ID", id_registrar_cliente);
        TextPrompt p2 = new TextPrompt("Tu nombre", nombre_registrar_cliente);
        login_clientes.dispose();
        crear_cuenta_cliente.pack();
        crear_cuenta_cliente.setModal(true);
        crear_cuenta_cliente.setLocationRelativeTo(null);
        crear_cuenta_cliente.setVisible(true);

    }//GEN-LAST:event_btn_crear_clienteMouseClicked

    private void btn_regresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_regresarMouseClicked
        crear_cuenta_cliente.dispose();
    }//GEN-LAST:event_btn_regresarMouseClicked

    private void btn_regresar_servicioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_regresar_servicioMouseClicked
        ServicioAlCliente.dispose();
    }//GEN-LAST:event_btn_regresar_servicioMouseClicked

    private void cb_modificarItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_modificarItemStateChanged
        // TODO add your handling code here:
        tabla_modificar.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel) tabla_modificar.getModel();
        flagAddRow = false;
        llenarTabla(model, cb_modificar);

        try {
            mostrarDatosT(model, cb_modificar);
        } catch (SQLException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cb_modificarItemStateChanged

    private void cb_eliminarItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_eliminarItemStateChanged
        tabla_eliminar.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel) tabla_eliminar.getModel();
        flagAddRow = false;
        llenarTabla(model, cb_eliminar);

        try {
            mostrarDatosE(model, cb_eliminar);
        } catch (SQLException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cb_eliminarItemStateChanged

    private void btn_modificar_sqlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_modificar_sqlMouseClicked
        // el index del combo inicia en 0

        if (tabla_modificar.getSelectedRowCount() != 0 && cb_modificar.getSelectedIndex() != 0) {
            int row = tabla_modificar.getSelectedRow();
            String fila = "";
            for (int i = 0; i < tabla_modificar.getColumnCount(); i++) {
                fila += tabla_modificar.getModel().getValueAt(row, i).toString() + "%";
            }

            //switch (cb_modificar.getSelectedIndex()) {
            String[] tokens = fila.split("%");
            PreparedStatement ps;
            Connection con = conectarBase.getConexion();
            String query = "";

            switch ((String) cb_modificar.getSelectedItem()) {
                case "PRODUCTO": {
                    try {
                        query = "UPDATE producto SET fabricante=?, nombreProducto=?, modelo=?, precio=?, tipoProducto=?, descripcion=? WHERE idProducto=" + tokens[0];
                        ps = con.prepareStatement(query);
                        for (int i = 1; i < tokens.length; i++) {
                            if (i == 4) {
                                ps.setFloat(i, Float.parseFloat(tokens[i]));
                            } else {
                                ps.setString(i, tokens[i]);
                            }

                        }
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    break;
                }
                case "CLIENTE": {/////////////////////////////
                    try {
                        query = "UPDATE cliente SET nombreCliente WHERE idCliente=" + tokens[0];
                        ps = con.prepareStatement(query);
                        ps.setString(1, tokens[1]);

                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "CLIENTE_TIENDA": {
                    String[] arr = {"idCliente"};

                    try {
                        ps = con.prepareStatement("INSERT INTO producto (idCliente) VALUES (?)");
                        for (int i = 1; i < tokens.length; i++) {
                            System.out.println(tokens[i]);
                            if (i == 4) {
                                ps.setFloat(i, Float.parseFloat(tokens[i]));
                            } else {

                                ps.setString(i, tokens[i]);
                            }

                        }
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "CONTRATO": {/////////////////////////////
                    try {
                        query = "UPDATE contrato SET cuota=? WHERE numCuenta=" + tokens[0] + " AND idCliente=" + tokens[2];
                        ps = con.prepareStatement(query);

                        ps.setInt(1, Integer.parseInt(tokens[1]));

                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "CATEGORIA": {

                    try {
                        query = "UPDATE categoria SET nombreCategoria=? WHERE idProducto=" + tokens[0];
                        ps = con.prepareStatement(query);

                        ps.setString(1, tokens[1]);

                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    break;
                }
                case "TIENE_EN_CARRITO": {
                    try {
                        query = "UPDATE tiene_en_carrito SET nombreUsuario=?, cantidadProductoCarrito=? WHERE idProducto=" + tokens[1];
                        ps = con.prepareStatement(query);

                        ps.setString(1, tokens[0]);
                        ps.setInt(2, Integer.parseInt(tokens[2]));

                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "CLIENTE_FRECUENTE": {
                    try {
                        query = "UPDATE cliente_frecuente SET nombreCliente=? WHERE idCliente=" + tokens[0];
                        ps = con.prepareStatement(query);

                        ps.setString(1, tokens[1]);

                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "CLIENTE_POCO_FRECUENTE": {
                    try {
                        query = "UPDATE cliente_poco_frecuente SET nombreCliente=? WHERE idCliente=" + tokens[0];
                        ps = con.prepareStatement(query);

                        ps.setString(1, tokens[1]);

                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "DETALLE_FACTURA": {
                    try {
                        query = "UPDATE detalle_de_factura SET cantidadProducto=?,ISV=? WHERE noFactura=" + tokens[0] + "AND idCliente=" + tokens[1];
                        ps = con.prepareStatement(query);

                        ps.setInt(3, Integer.parseInt(tokens[2]));
                        ps.setFloat(4, Float.parseFloat(tokens[3]));

                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "ALMACEN": {
                    try {
                        query = "UPDATE almacen SET ciudad=? WHERE codigoAlmacen=" + tokens[0];
                        ps = con.prepareStatement(query);

                        ps.setString(2, tokens[1]);

                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "INVENTARIO": {
                    try {
                        query = "UPDATE inventario SET cantidadInventario=? WHERE codigoAlmacen= " + tokens[0] + " AND codigoTienda=" + tokens[1] + " AND idProducto=" + tokens[2];
                        ps = con.prepareStatement(query);

                        ps.setInt(4, Integer.parseInt(tokens[3]));

                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "ORDEN": {
                    try {
                        query = "UPDATE orden SET nombreRemitente=?,empresaEnvio=?, direccionEnvio=?, noSeguimiento=? WHERE noOrden=" + tokens[0] + " AND idCliente=" + tokens[1];
                        ps = con.prepareStatement(query);

                        ps.setString(3, tokens[2]);
                        ps.setString(4, tokens[3]);
                        ps.setString(5, tokens[4]);
                        ps.setInt(6, Integer.parseInt(tokens[5]));

                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "CLIENTE_VIRTUAL": {
                    //String[] arr = {"idCliente", "direccionFacturacion", "nombreUsario", "password", "numeroTarjeta", "tarjetahabiente", "mesVencimiento", "yearVencimiento", "codigoSeguridad"};
                    try {
                        query = "UPDATE cliente_virtual SET direccion=?,nombre=?,password=?, numeroTarjeta=?, tarjetahabiente=?, mesVencimiento=?, yearVencimiento=?, codigoSeguridad=? WHERE idCliente =" + tokens[0];
                        ps = con.prepareStatement(query);

                        ps.setString(2, tokens[1]);
                        ps.setString(3, tokens[2]);
                        ps.setString(4, tokens[3]);
                        ps.setInt(5, Integer.parseInt(tokens[4]));
                        ps.setString(6, tokens[5]);
                        ps.setString(7, tokens[6]);
                        ps.setString(8, tokens[7]);
                        ps.setString(9, tokens[8]);

                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "FACTURA": {
                    try {
                        query = "UPDATE factura SET direccion=?,rtn=?,fechaEmision=? WHERE noFactura=" + tokens[0] + " AND codigoTienda=" + tokens[1] + " AND idCliente=" + tokens[5];
                        ps = con.prepareStatement(query);

                        ps.setString(3, tokens[2]);
                        ps.setString(4, tokens[3]);
                        ps.setString(5, tokens[4]);

                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "TIENDA": {
                    try {
                        query = "UPDATE tienda SET ubicacion=? WHERE codigoTienda=" + tokens[0];
                        ps = con.prepareStatement(query);

                        ps.setString(2, tokens[1]);

                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
            }

        }
    }//GEN-LAST:event_btn_modificar_sqlMouseClicked

    private void btn_eliminar_sqlMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_eliminar_sqlMouseClicked
        // TODO add your handling code here:
        if (tabla_eliminar.getSelectedRowCount() != 0 && cb_eliminar.getSelectedIndex() != 0) {
            DefaultTableModel model = (DefaultTableModel) tabla_eliminar.getModel();
            int row = tabla_eliminar.getSelectedRow();
            String fila = "";
            for (int i = 0; i < tabla_eliminar.getColumnCount(); i++) {
                fila += tabla_eliminar.getModel().getValueAt(row, i).toString() + "%";
            }

            //switch (cb_modificar.getSelectedIndex()) {
            String[] tokens = fila.split("%");
            PreparedStatement ps;
            Connection con = conectarBase.getConexion();
            String query = "";

            switch ((String) cb_eliminar.getSelectedItem()) {
                case "PRODUCTO": {
                    try {
                        query = "DELETE FROM producto WHERE idProducto=" + tokens[0];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "CLIENTE": {/////////////////////////////
                    try {
                        query = "DELETE FROM cliente WHERE idCliente=" + tokens[0];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "CLIENTE_TIENDA": {
                    try {
                        query = "DELETE FROM cliente_tienda WHERE idCliente=" + tokens[0];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "CONTRATO": {/////////////////////////////
                    try {
                        query = "DELETE FROM contrato WHERE numCuenta=" + tokens[0];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "CATEGORIA": {

                    try {
                        query = "DELETE FROM categoria WHERE idProducto=" + tokens[0];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    break;
                }
                case "TIENE_EN_CARRITO": {
                    try {
                        query = "DELETE FROM tiene_en_carrito WHERE idProducto=" + tokens[1] + " AND nombreUsuario=" + tokens[0] + " AND cantidadProductoCarrito=" + tokens[2];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "CLIENTE_FRECUENTE": {
                    try {
                        query = "DELETE FROM cliente_frecuente WHERE idCliente=" + tokens[0];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "CLIENTE_POCO_FRECUENTE": {
                    try {
                        query = "DELETE FROM cliente_poco_frecuente WHERE idCliente=" + tokens[0];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "DETALLE_FACTURA": {
                    try {
                        query = "DELETE FROM detalle_factura WHERE idProducto=" + tokens[1] + " AND noFactura=" + tokens[0];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "ALMACEN": {
                    try {
                        query = "DELETE FROM almacen WHERE codigoAlmacen=" + tokens[0];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "INVENTARIO": {
                    try {
                        query = "DELETE FROM inventario WHERE codigoAlmacen=" + tokens[0] + " AND codigoTienda=" + tokens[1] + " AND cantidadInventario=" + tokens[2];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "ORDEN": {
                    try {
                        query = "DELETE FROM orden WHERE noOrden=" + tokens[0];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "CLIENTE_VIRTUAL": {
                    try {
                        query = "DELETE FROM cliente_virtual WHERE idCliente=" + tokens[0];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "FACTURA": {
                    try {
                        query = "DELETE FROM factura WHERE noFactura=" + tokens[0];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
                case "TIENDA": {
                    try {
                        query = "DELETE FROM tienda WHERE codigoTienda=" + tokens[0];
                        ps = con.prepareStatement(query);
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    break;
                }
            }
            tabla_eliminar.setModel(new DefaultTableModel());
            JOptionPane.showMessageDialog(null, "Eliminación realizada");
        } else {
            JOptionPane.showMessageDialog(null, "Seleccione una fila");
        }

    }//GEN-LAST:event_btn_eliminar_sqlMouseClicked

    private void btn_busquedaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_busquedaMouseClicked
        // TODO add your handling code here:
        Connection con = conectarBase.getConexion();
        String query = "SELECT * FROM inventario where codigoTienda=" + txt_busqueda.getText();
        Statement st;
        String[] arr = {"codigoAlmacen", "codigoTienda", "idProducto", "cantidadInventario"};
        arregloAtributos = arr;
        tabla_servicio.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel) tabla_servicio.getModel();
        for (String arr1 : arr) {
            model.addColumn(arr1);
        }
        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                Object[] row = {rs.getInt("codigoAlmacen"), rs.getInt("codigoTienda"), rs.getInt("idProducto"), rs.getInt("cantidadInventario")};
                model.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btn_busquedaMouseClicked

    private void cb_almacenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_almacenItemStateChanged
        // TODO add your handling code here:
        tabla_empleado.setModel(new DefaultTableModel());

        switch (cb_almacen.getSelectedIndex()) {
            case 1: {
                boton_insertarE.setEnabled(true);
                String[] arr = {"noOrden", "idCliente", "nombreRemitemte", "empresaEnvio", "direccionEnvio", "noSeguimiento"};
                arregloAtributos = arr;
                tabla_empleado.setModel(new DefaultTableModel());
                DefaultTableModel model = (DefaultTableModel) tabla_empleado.getModel();
                for (String arr1 : arr) {
                    model.addColumn(arr1);
                }
                model.setRowCount(1);
                break;
            }
            case 2: {
                boton_insertarE.setEnabled(true);
                String[] arr = {"codigoAlmacen", "codigoTienda", "idProducto", "cantidadInventario"};
                arregloAtributos = arr;
                tabla_empleado.setModel(new DefaultTableModel());
                DefaultTableModel model = (DefaultTableModel) tabla_empleado.getModel();
                for (String arr1 : arr) {
                    model.addColumn(arr1);
                }
                Connection con = conectarBase.getConexion();
                String query = "SELECT * FROM inventario";
                Statement st;
                try {
                    st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("codigoAlmacen"), rs.getInt("codigoTienda"), rs.getInt("idProducto"), rs.getInt("cantidadInventario")};
                        model.addRow(row);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
            case 3: {
                boton_insertarE.setEnabled(false);
                String[] arr = {"noOrden", "idCliente", "nombreRemitemte", "empresaEnvio", "direccionEnvio", "noSeguimiento"};
                arregloAtributos = arr;
                tabla_empleado.setModel(new DefaultTableModel());
                DefaultTableModel model = (DefaultTableModel) tabla_empleado.getModel();
                for (String arr1 : arr) {
                    model.addColumn(arr1);
                }
                Connection con = conectarBase.getConexion();
                String query = "SELECT * FROM orden";
                Statement st;
                try {
                    st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("noOrden"), rs.getInt("idCliente"), rs.getString("nombreRemitente"), rs.getString("empresaEnvio"), rs.getString("direccionEnvio"), rs.getInt("noSeguimiento")};
                        model.addRow(row);
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
            default:
                break;
        }
    }//GEN-LAST:event_cb_almacenItemStateChanged

    private void boton_insertarEMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton_insertarEMouseClicked
        // TODO add your handling code here:
        if (tabla_empleado.getSelectedRowCount() != 0) {

            if (cb_almacen.getSelectedIndex() == 1) {
                DefaultTableModel model = (DefaultTableModel) tabla_empleado.getModel();
                if (validarIngresoTable(tabla_empleado, false)) {
                    Object k = new Object[arregloAtributos.length];
                    model.addRow((Object[]) k);
                }
                tabla_empleado.setEnabled(false);
                Connection con = conectarBase.getConexion();

                String guardar = "";
                for (int j = 0; j < model.getColumnCount(); j++) {
                    guardar += model.getValueAt(0, j).toString() + "%";
                }

                String[] tokens = guardar.split("%");
                PreparedStatement ps;

                String acum = "";
                String query = "SELECT * FROM cliente";
                Statement st;
                try {
                    st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        acum += rs.getInt("idCliente") + " ";
                    }
                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (acum.contains(tokens[1])) {
                    try {
                        ps = con.prepareStatement("INSERT INTO orden (idCliente,nombreRemitente, empresaEnvio, direccionEnvio, noSeguimiento) VALUES (?,?,?,?,?)");
                        ps.setInt(1, Integer.parseInt(tokens[1]));
                        ps.setString(2, tokens[2]);
                        ps.setString(3, tokens[3]);
                        ps.setString(4, tokens[4]);
                        ps.setInt(5, Integer.parseInt(tokens[5]));
                        ps.executeUpdate();
                    } catch (SQLException ex) {
                        Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    JOptionPane.showMessageDialog(null, "Dato insertado correctamente");
                } else {
                    JOptionPane.showMessageDialog(null, "No existe una orden con ese id");
                    cb_almacen.setSelectedIndex(0);
                    tabla_empleado.setModel(new DefaultTableModel());
                    tabla_empleado.setEnabled(true);
                }
            } else if (cb_almacen.getSelectedIndex() == 2) {
                try {
                    int row = tabla_empleado.getSelectedRow();
                    String fila = "";
                    for (int i = 0; i < tabla_empleado.getColumnCount(); i++) {
                        fila += tabla_empleado.getModel().getValueAt(row, i).toString() + "%";
                    }

                    //switch (cb_modificar.getSelectedIndex()) {
                    String[] tokens = fila.split("%");
                    PreparedStatement ps;
                    Connection con = conectarBase.getConexion();
                    String query = "";
                    query = "UPDATE inventario SET cantidadInventario=? WHERE codigoAlmacen= " + tokens[0] + " AND codigoTienda=" + tokens[1] + " AND idProducto=" + tokens[2];
                    ps = con.prepareStatement(query);

                    ps.setInt(1, Integer.parseInt(tokens[3]));

                    ps.executeUpdate();
                    cb_almacen.setSelectedIndex(0);
                    tabla_empleado.setModel(new DefaultTableModel());
                    tabla_empleado.setEnabled(true);
                    JOptionPane.showMessageDialog(null, "Dato modificado correctamente");

                } catch (SQLException ex) {
                    Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "No ha seleccionado alguna fila");

        }

    }//GEN-LAST:event_boton_insertarEMouseClicked

    private void boton_ClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton_ClienteMouseClicked
        // TODO add your handling code here:


        login_clientes.pack();
        login_clientes.setModal(true);
        login_clientes.setLocationRelativeTo(null);
        login_clientes.setVisible(true);
    }//GEN-LAST:event_boton_ClienteMouseClicked
    String categoria;
    private void cb_clienteVItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cb_clienteVItemStateChanged
        // TODO add your handling code here:
        if (cb_clienteV.getSelectedIndex() != 0) {
            String valor = (String) cb_clienteV.getSelectedItem();
            categoria = valor;
            tabla_cliente.setModel(new DefaultTableModel());
            DefaultTableModel model = (DefaultTableModel) tabla_cliente.getModel();

            String[] arr = {"idProducto", "fabricante", "nombreProducto", "modelo", "precio", "tipoProducto", "descripcion"};
            arregloAtributos = arr;
            for (int j = 0; j < arr.length; j++) {
                model.addColumn(arr[j]);
            }
            Connection con = conectarBase.getConexion();
            String acum = "";
            String query2 = "SELECT * FROM categoria";
            Statement st1;
            //JOptionPane.showMessageDialog(null, valor);

            try {
                st1 = con.createStatement();
                ResultSet rs = st1.executeQuery(query2);
                while (rs.next()) {
                    if (valor.equals(rs.getString("nombreCategoria"))) {
                        acum += rs.getInt("idProducto") + " ";

                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
            }
            //JOptionPane.showMessageDialog(null, acum);
            String query = "SELECT * FROM producto";

            try {
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(query);
                rs.next();
                //JOptionPane.showMessageDialog(null, rs.getInt("idProducto")+" mas "+acum.contains(rs.getInt("idProducto")+""));
                while (rs.next()) {
                    if (acum.contains(rs.getInt("idProducto") + "")) {
                        //JOptionPane.showMessageDialog(null, "entra");
                        Object[] row = {rs.getInt("idProducto"), rs.getString("fabricante"), rs.getString("nombreProducto"), rs.getString("modelo"), rs.getFloat("precio"), rs.getString("tipoProducto"), rs.getString("descripcion")};
                        model.addRow(row);

                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_cb_clienteVItemStateChanged

    private void boton_carritoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boton_carritoMouseClicked
        // TODO add your handling code here:
        if (tabla_cliente.getSelectedRowCount() != 0) {
            DefaultTableModel model = (DefaultTableModel) tabla_cliente.getModel();
            if (validarIngresoTable(tabla_cliente, false)) {
                Object k = new Object[arregloAtributos.length];
                model.addRow((Object[]) k);
            }

            String guardar = "";
            for (int j = 0; j < model.getColumnCount(); j++) {
                guardar += model.getValueAt(0, j).toString() + "%";
            }

            String[] tokens = guardar.split("%");
            Connection con = conectarBase.getConexion();
            PreparedStatement ps;
            try {
                ps = con.prepareStatement("INSERT INTO tiene_en_carrito (nombreUsuario, idProducto, cantidadProductoCarrito) VALUES (?,?,?)");
                ps.setString(1, cliente_ingresado);
                ps.setInt(2, Integer.parseInt(tokens[0]));
                ps.setInt(3, 1);
                ps.executeUpdate();
            } catch (SQLException ex) {
                Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
            }
            ////////////////////////////////////

        }

    }//GEN-LAST:event_boton_carritoMouseClicked

    private void salirClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_salirClienteMouseClicked
        // TODO add your handling code here:
        cliente_en_linea.setVisible(false);
        Perfil_clientes_enLinea.pack();
        Perfil_clientes_enLinea.setModal(true);
        Perfil_clientes_enLinea.setLocationRelativeTo(null);
        Perfil_clientes_enLinea.setVisible(true);
    }//GEN-LAST:event_salirClienteMouseClicked

    private void comprarClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_comprarClienteMouseClicked
        // TODO add your handling code here:

        Connection con = conectarBase.getConexion();
        PreparedStatement ps;
        DefaultTableModel model = (DefaultTableModel) tabla_carrito.getModel();

        String[] guardar = new String[tabla_carrito.getRowCount()];
        int precio = 0;
        for (int i = 0; i < tabla_carrito.getRowCount(); i++) {

            guardar[i] = model.getValueAt(i, 0).toString();
            precio += Float.parseFloat(model.getValueAt(i, 4).toString());

        }

        String dire = JOptionPane.showInputDialog("Ingrese su direccion");
        String rtn = JOptionPane.showInputDialog("Ingrese su rtn");

        try {
            ps = con.prepareStatement("INSERT INTO factura (codigoTienda, direccion, rtn, fechaEmision, idCliente, total_venta) VALUES (?,?,?,?,?,?)");
            ps.setInt(1, 1);
            ps.setString(2, dire);
            ps.setString(3, rtn);
            ps.setString(4, hora_jbl.getText());
            ps.setInt(5, id_ingresado);
            ps.setFloat(6, precio * 15);
            ps.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }

        String query = "SELECT * FROM factura";
        Statement st;
        int nfac = 0;
        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                nfac = rs.getInt("noFactura");
            }
        } catch (SQLException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }

        for (int i = 0; i < tabla_carrito.getRowCount(); i++) {

            try {
                ps = con.prepareStatement("INSERT INTO detalle_factura (noFactura, idProducto, cantidadProducto, ISV) VALUES (?,?,?,?)");
                ps.setInt(1, nfac);
                ps.setInt(2, Integer.parseInt(guardar[i]));
                ps.setInt(3, 1);
                ps.setFloat(4, 13.1f);
                ps.executeUpdate();
            } catch (SQLException ex) {
                Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        JOptionPane.showMessageDialog(null, "Compra realizada con exito");
        
        
        tabla_fac.setModel(new DefaultTableModel());
        DefaultTableModel modelo = (DefaultTableModel) tabla_fac.getModel();
        
        String[] arr = {"NoFactura", "idProducto", "cantidadProducto", "ISV"};
        arregloAtributos = arr;
        for (int j = 0; j < arr.length; j++) {
            modelo.addColumn(arr[j]);
        }
        String query2 = "SELECT * FROM detalle_factura";
        Statement st2;
        try {
            st2 = con.createStatement();
            ResultSet rs = st2.executeQuery(query2);
            while (rs.next()) {
                Object[] row = {rs.getInt("noFactura"), rs.getInt("idProducto"), rs.getInt("cantidadProducto"), rs.getFloat("ISV")};
                modelo.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_comprarClienteMouseClicked

    private void verCarritoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_verCarritoMouseClicked
        // TODO add your handling code here:

        //////////////////////////a
        tabla_carrito.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel) tabla_carrito.getModel();

        String[] arr = {"idProducto", "fabricante", "nombreProducto", "modelo", "precio", "tipoProducto", "descripcion"};
        arregloAtributos = arr;
        for (int j = 0; j < arr.length; j++) {
            model.addColumn(arr[j]);
        }
        Connection con = conectarBase.getConexion();
        String acum = "";
        String query2 = "SELECT * FROM categoria";
        Statement st1;
        //JOptionPane.showMessageDialog(null, valor);

        try {
            st1 = con.createStatement();
            ResultSet rs = st1.executeQuery(query2);
            while (rs.next()) {
                if (categoria.equals(rs.getString("nombreCategoria"))) {
                    acum += rs.getInt("idProducto") + " ";

                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        //JOptionPane.showMessageDialog(null, acum);
        String query = "SELECT * FROM producto";

        try {
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
            rs.next();
            //JOptionPane.showMessageDialog(null, rs.getInt("idProducto")+" mas "+acum.contains(rs.getInt("idProducto")+""));
            while (rs.next()) {
                if (acum.contains(rs.getInt("idProducto") + "")) {
                    //JOptionPane.showMessageDialog(null, "entra");
                    Object[] row = {rs.getInt("idProducto"), rs.getString("fabricante"), rs.getString("nombreProducto"), rs.getString("modelo"), rs.getFloat("precio"), rs.getString("tipoProducto"), rs.getString("descripcion")};
                    model.addRow(row);

                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }

        Perfil_clientes_enLinea.setVisible(false);
        cliente_en_linea.pack();
        cliente_en_linea.setModal(true);
        cliente_en_linea.setLocationRelativeTo(null);
        cliente_en_linea.setVisible(true);
    }//GEN-LAST:event_verCarritoMouseClicked

    private void btn_ver_bitacoraMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_ver_bitacoraMouseClicked
        tabla_bitacora.setModel(new DefaultTableModel());
        DefaultTableModel model = (DefaultTableModel) tabla_bitacora.getModel();
        String[] arr = {"table_name", "registro", "usuario", "ipv4", "query", "fecha"};
        arregloAtributos = arr;
        for (int j = 0; j < arr.length; j++) {
            model.addColumn(arr[j]);
        }

        Connection con = conectarBase.getConexion();
        String query = "SELECT * FROM bitacora";
        Statement st;
        try {
            st = con.createStatement();
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                Object[] row = {rs.getString("table_name"), rs.getString("registro"), rs.getString("usuario"), rs.getString("ipv4"), rs.getString("query"), rs.getString("fecha")};
                model.addRow(row);
            }
        } catch (SQLException ex) {
            Logger.getLogger(principal.class.getName()).log(Level.SEVERE, null, ex);
        }

        administradores.setVisible(false);
        ventana_bitacora.pack();
        ventana_bitacora.setModal(true);
        ventana_bitacora.setLocationRelativeTo(null);
        ventana_bitacora.setVisible(true);
    }//GEN-LAST:event_btn_ver_bitacoraMouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        ventana_bitacora.dispose();
        administradores.pack();
        administradores.setModal(true);
        administradores.setLocationRelativeTo(null);
        administradores.setVisible(true);
    }//GEN-LAST:event_jButton1MouseClicked

    private void anteriorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_anteriorActionPerformed
        if (contImages == 1) {
            contImages = 4;
        }
        contImages--;
        jLabel10.setIcon(Imagen[contImages]);
    }//GEN-LAST:event_anteriorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new principal().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog Perfil_clientes_enLinea;
    private javax.swing.JDialog Perfil_clientes_frecuentes;
    private javax.swing.JDialog Perfil_clientes_poco_frecuentes;
    private javax.swing.JDialog ServicioAlCliente;
    private javax.swing.JDialog administradores;
    private javax.swing.JButton anterior;
    private javax.swing.JButton anterior1;
    private javax.swing.JButton anterior2;
    private javax.swing.JButton boton_Cliente;
    private javax.swing.JButton boton_carrito;
    private javax.swing.JButton boton_crear;
    private javax.swing.JButton boton_empleado;
    private javax.swing.JButton boton_insertarE;
    private javax.swing.JButton boton_salir;
    private javax.swing.JButton btn_admin;
    private javax.swing.JButton btn_buscar_producto1;
    private javax.swing.JButton btn_buscar_producto2;
    private javax.swing.JButton btn_busqueda;
    private javax.swing.JButton btn_cerrar_sesion;
    private javax.swing.JButton btn_cerrar_sesion1;
    private javax.swing.JButton btn_cerrar_sesion2;
    private javax.swing.JButton btn_cerrar_sesion_empleado;
    private javax.swing.JButton btn_crear_cliente;
    private javax.swing.JButton btn_eliminar_sql;
    private javax.swing.JButton btn_ingresarCliente;
    private javax.swing.JButton btn_ingresar_admin;
    private javax.swing.JButton btn_login_empleado;
    private javax.swing.JButton btn_modificar_sql;
    private javax.swing.JButton btn_regresar;
    private javax.swing.JButton btn_regresar2;
    private javax.swing.JButton btn_regresar3;
    private javax.swing.JButton btn_regresar4;
    private javax.swing.JButton btn_regresarCliente;
    private javax.swing.JButton btn_regresar_empleado;
    private javax.swing.JButton btn_regresar_loginAdmin;
    private javax.swing.JButton btn_regresar_servicio;
    private javax.swing.JLabel btn_regresar_tabbed;
    private javax.swing.JButton btn_siguiente;
    private javax.swing.JButton btn_ver_bitacora;
    private javax.swing.JComboBox<String> cb_almacen;
    private javax.swing.JComboBox<String> cb_clienteV;
    private javax.swing.JComboBox<String> cb_crear;
    private javax.swing.JComboBox<String> cb_eliminar;
    private javax.swing.JComboBox<String> cb_modificar;
    private javax.swing.JDialog centrode_llamadas;
    private javax.swing.JDialog cliente_en_linea;
    private javax.swing.JComboBox<String> cmb_tipoCliente;
    private javax.swing.JButton comprarCliente;
    private javax.swing.JDialog crear_cuenta_cliente;
    private javax.swing.JLabel fondo_admiistradores;
    private javax.swing.JLabel fondo_centroLlamadas;
    private javax.swing.JLabel fondo_loginCliente;
    private javax.swing.JLabel fondo_login_admin;
    private javax.swing.JLabel fondo_login_empleados;
    private javax.swing.JLabel fondo_princiipal;
    private javax.swing.JLabel fondo_principal2;
    private javax.swing.JLabel fondo_registro_clientes;
    private javax.swing.JLabel fondo_servicioAlCliente;
    private javax.swing.JLabel hora_jbl;
    private javax.swing.JTextField id_login_cliente;
    private javax.swing.JTextField id_registrar_cliente;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem15;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTable jTable5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JDialog login_admin;
    private javax.swing.JDialog login_clientes;
    private javax.swing.JDialog login_empleados;
    private javax.swing.JTextField nombre_registrar_cliente;
    private javax.swing.JPanel panel_crear;
    private javax.swing.JPanel panel_eliminar;
    private javax.swing.JPanel panel_modificar;
    private javax.swing.JPasswordField password_admin;
    private javax.swing.JPasswordField password_empleado;
    private javax.swing.JPasswordField password_login_cliente;
    private javax.swing.JDialog perfil_empleados;
    private javax.swing.JButton salirCliente;
    private javax.swing.JButton siguiente;
    private javax.swing.JButton siguiente1;
    private javax.swing.JButton siguiente2;
    private javax.swing.JTabbedPane tabbed_eliminar;
    private javax.swing.JTable tabla_bitacora;
    private javax.swing.JTable tabla_carrito;
    private javax.swing.JTable tabla_cliente;
    private javax.swing.JTable tabla_crear;
    private javax.swing.JTable tabla_eliminar;
    private javax.swing.JTable tabla_empleado;
    private javax.swing.JTable tabla_fac;
    private javax.swing.JTable tabla_modificar;
    private javax.swing.JTable tabla_servicio;
    private javax.swing.JLabel titulo;
    private javax.swing.JLabel titulo2;
    private javax.swing.JTextField txt_buscar1;
    private javax.swing.JTextField txt_buscar2;
    private javax.swing.JTextField txt_busqueda;
    private javax.swing.JTextField user_admin;
    private javax.swing.JTextField user_empleado;
    private javax.swing.JDialog ventana_bitacora;
    private javax.swing.JButton verCarrito;
    // End of variables declaration//GEN-END:variables
    String[] arregloAtributos;
    boolean flagAddRow = false;

    private void mostrarDatosT(DefaultTableModel model, JComboBox cb_elegido) throws SQLException {
        if (cb_elegido.getSelectedItem() != null) {
            String contenido = (String) cb_elegido.getSelectedItem();

            switch (contenido) {
                case "PRODUCTO": {

                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM producto";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("idProducto"), rs.getString("fabricante"), rs.getString("nombreProducto"), rs.getString("modelo"), rs.getFloat("precio"), rs.getString("tipoProducto"), rs.getString("descripcion")};
                        model.addRow(row);
                    }

                    break;
                }
                case "CLIENTE": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM cliente";

                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("idCliente"), rs.getString("nombreCliente")};
                        model.addRow(row);
                    }

                    break;
                }
                case "CLIENTE_TIENDA": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM cliente_tienda";

                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("idCliente")};
                        model.addRow(row);
                    }

                    break;
                }
                case "CONTRATO": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM contrato";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("numCuenta"), rs.getInt("cuota"), rs.getInt("idCliente")};
                        model.addRow(row);
                    }
                    break;
                }
                case "CATEGORIA": {

                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM categoria";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("idProducto"), rs.getString("nombreCategoria")};
                        model.addRow(row);
                    }

                    break;
                }
                case "TIENE_EN_CARRITO": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM tiene_en_carrito";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getString("nombreUsuario"), rs.getInt("idProducto"), rs.getInt("cantidadProductoCarrito")};
                        model.addRow(row);
                    }
                    break;
                }
                case "CLIENTE_FRECUENTE": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM cliente_frecuente";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("idCliente"), rs.getString("nombreCliente"), rs.getInt("numCuenta")};
                        model.addRow(row);
                    }
                    break;
                }
                case "CLIENTE_POCO_FRECUENTE": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM cliente_poco_frecuente";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("idCliente"), rs.getString("nombreCliente")};
                        model.addRow(row);
                    }
                    break;
                }
                case "DETALLE_FACTURA": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM detalle_factura";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("noFactura"), rs.getInt("idProducto"), rs.getInt("cantidadProducto"), rs.getFloat("ISV")};
                        model.addRow(row);
                    }
                    break;
                }
                case "ALMACEN": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM almacen";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("codigoAlmacen"), rs.getString("ciudad")};
                        model.addRow(row);
                    }
                    break;
                }
                case "INVENTARIO": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM inventario";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("codigoAlmacen"), rs.getInt("codigoTienda"), rs.getInt("idProducto"), rs.getInt("cantidadInventario")};
                        model.addRow(row);
                    }
                    break;
                }
                case "ORDEN": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM orden";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("noOrden"), rs.getInt("idCliente"), rs.getString("nombreRemitente"), rs.getString("empresaEnvio"), rs.getString("direccionEnvio"), rs.getInt("noSeguimiento")};
                        model.addRow(row);
                    }
                    break;
                }
                case "CLIENTE_VIRTUAL": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM cliente_virtual";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("idCliente"), rs.getString("direccionFacturacion"), rs.getString("nombreUsuario"), rs.getString("password"), rs.getString("numeroTarjeta"), rs.getString("tarjetaHabiente"), rs.getString("mesVencimiento"), rs.getString("yearVencimiento"), rs.getString("codigoSeguridad"), rs.getString("correo_electronico"), rs.getString("numero_telefonico")};
                        model.addRow(row);
                    }
                    break;
                }
                case "FACTURA": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM factura";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("noFactura"), rs.getInt("codigoTienda"), rs.getString("direccion"), rs.getString("rtn"), rs.getString("fechaEmision"), rs.getInt("idCliente"), rs.getFloat("total_venta")};
                        model.addRow(row);
                    }
                    break;
                }
                case "TIENDA": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM tienda";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("codigoTienda"), rs.getString("ubicacion")};
                        model.addRow(row);
                    }
                    break;
                }
            }

        }
    }

    private void mostrarDatosE(DefaultTableModel model, JComboBox cb_elegido) throws SQLException {
        if (cb_elegido.getSelectedItem() != null) {
            String contenido = (String) cb_elegido.getSelectedItem();

            switch (contenido) {
                case "PRODUCTO": {

                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM producto";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("idProducto"), rs.getString("fabricante"), rs.getString("nombreProducto"), rs.getString("modelo"), rs.getFloat("precio"), rs.getString("tipoProducto"), rs.getString("descripcion")};
                        model.addRow(row);
                    }

                    break;
                }
                case "CLIENTE": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM cliente";

                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("idCliente"), rs.getString("nombreCliente")};
                        model.addRow(row);
                    }

                    break;
                }
                case "CLIENTE_TIENDA": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM cliente_tienda";

                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("idCliente")};
                        model.addRow(row);
                    }

                    break;
                }
                case "CONTRATO": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM contrato";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("numCuenta"), rs.getInt("cuota"), rs.getInt("idCliente")};
                        model.addRow(row);
                    }
                    break;
                }
                case "CATEGORIA": {

                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM categoria";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("idProducto"), rs.getString("nombreCategoria")};
                        model.addRow(row);
                    }

                    break;
                }
                case "TIENE_EN_CARRITO": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM tiene_en_carrito";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getString("nombreUsuario"), rs.getInt("idProducto"), rs.getInt("cantidadProductoCarrito")};
                        model.addRow(row);
                    }
                    break;
                }
                case "CLIENTE_FRECUENTE": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM cliente_frecuente";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("idCliente"), rs.getString("nombreCliente"), rs.getInt("numCuenta")};
                        model.addRow(row);
                    }
                    break;
                }
                case "CLIENTE_POCO_FRECUENTE": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM cliente_poco_frecuente";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("idCliente"), rs.getString("nombreCliente")};
                        model.addRow(row);
                    }
                    break;
                }
                case "DETALLE_FACTURA": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM detalle_factura";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("noFactura"), rs.getInt("idProducto"), rs.getInt("cantidadProducto"), rs.getFloat("ISV")};
                        model.addRow(row);
                    }
                    break;
                }
                case "ALMACEN": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM almacen";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("codigoAlmacen"), rs.getString("ciudad")};
                        model.addRow(row);
                    }
                    break;
                }
                case "INVENTARIO": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM inventario";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("codigoAlmacen"), rs.getInt("codigoTienda"), rs.getInt("idProducto"), rs.getInt("cantidadInventario")};
                        model.addRow(row);
                    }
                    break;
                }
                case "ORDEN": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM orden";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("noOrden"), rs.getInt("idCliente"), rs.getString("nombreRemitente"), rs.getString("empresaEnvio"), rs.getString("direccionEnvio"), rs.getInt("noSeguimiento")};
                        model.addRow(row);
                    }
                    break;
                }
                case "CLIENTE_VIRTUAL": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM cliente_virtual";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("idCliente"), rs.getString("direccionFacturacion"), rs.getString("nombreUsuario"), rs.getString("password"), rs.getString("numeroTarjeta"), rs.getString("tarjetaHabiente"), rs.getString("mesVencimiento"), rs.getString("yearVencimiento"), rs.getString("codigoSeguridad"), rs.getString("correo_electronico"), rs.getString("numero_telefonico")};
                        model.addRow(row);
                    }
                    break;
                }
                case "FACTURA": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM factura";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("noFactura"), rs.getInt("codigoTienda"), rs.getString("direccion"), rs.getString("rtn"), rs.getString("fechaEmision"), rs.getInt("idCliente"), rs.getFloat("total_venta")};
                        model.addRow(row);
                    }
                    break;
                }
                case "TIENDA": {
                    Connection con = conectarBase.getConexion();
                    String query = "SELECT * FROM tienda";
                    Statement st = con.createStatement();
                    ResultSet rs = st.executeQuery(query);
                    while (rs.next()) {
                        Object[] row = {rs.getInt("codigoTienda"), rs.getString("ubicacion")};
                        model.addRow(row);
                    }
                    break;
                }
            }

        }
    }

    private void llenarTabla(DefaultTableModel model, JComboBox cb_elegido) {
        if (cb_elegido.getSelectedItem() != null) {
            String contenido = (String) cb_elegido.getSelectedItem();

            switch (contenido) {
                case "PRODUCTO": {
                    String[] arr = {"idProducto", "fabricante", "nombreProducto", "modelo", "precio", "tipoProducto", "descripcion"};
                    arregloAtributos = arr;
                    for (int j = 0; j < arr.length; j++) {
                        model.addColumn(arr[j]);
                    }

                    break;
                }

                case "CLIENTE": {
                    String[] arr = {"idCliente", "nombreCliente"};
                    arregloAtributos = arr;
                    for (int j = 0; j < arr.length; j++) {
                        model.addColumn(arr[j]);
                    }
                    break;
                }
                case "CONTRATO": {
                    String[] arr = {"numCuenta", "Cuota", "idCliente"};
                    arregloAtributos = arr;
                    for (int j = 0; j < arr.length; j++) {
                        model.addColumn(arr[j]);
                    }
                    break;
                }
                case "CATEGORIA": {

                    String[] arr = {"idProducto", "nombreCategoria"};
                    arregloAtributos = arr;
                    for (int j = 0; j < arr.length; j++) {
                        model.addColumn(arr[j]);
                    }

                    break;
                }
                case "TIENE_EN_CARRITO": {
                    String[] arr = {"nombreUsuario", "idProducto", "cantidadProductoCarrito"};
                    arregloAtributos = arr;
                    for (int j = 0; j < arr.length; j++) {
                        model.addColumn(arr[j]);
                    }
                    break;
                }
                case "CLIENTE_FRECUENTE": {
                    String[] arr = {"idCliente", "nombreCliente", "numCuenta"};
                    arregloAtributos = arr;
                    for (int j = 0; j < arr.length; j++) {
                        model.addColumn(arr[j]);
                    }
                    break;
                }
                case "CLIENTE_POCO_FRECUENTE": {
                    String[] arr = {"idCliente", "nombreCliente"};
                    arregloAtributos = arr;
                    for (int j = 0; j < arr.length; j++) {
                        model.addColumn(arr[j]);
                    }
                    break;
                }
                case "DETALLE_FACTURA": {
                    String[] arr = {"NoFactura", "idProducto", "cantidadProducto", "ISV"};
                    arregloAtributos = arr;
                    for (int j = 0; j < arr.length; j++) {
                        model.addColumn(arr[j]);
                    }
                    break;
                }
                case "ALMACEN": {
                    String[] arr = {"ciudad"};
                    arregloAtributos = arr;
                    for (int j = 0; j < arr.length; j++) {
                        model.addColumn(arr[j]);
                    }
                    break;
                }
                case "INVENTARIO": {
                    String[] arr = {"codigoAlmacen", "codigoTienda", "idProducto", "cantidadInventario"};
                    arregloAtributos = arr;
                    for (int j = 0; j < arr.length; j++) {
                        model.addColumn(arr[j]);
                    }
                    break;
                }
                case "ORDEN": {
                    String[] arr = {"noOrden", "idCliente", "nombreRemitemte", "empresaEnvio", "direccionEnvio", "noSeguimiento"};
                    arregloAtributos = arr;
                    for (int j = 0; j < arr.length; j++) {
                        model.addColumn(arr[j]);
                    }
                    break;
                }
                case "CLIENTE_VIRTUAL": {
                    String[] arr = {"idCliente", "direccionFacturacion", "nombreUsario", "password", "numeroTarjeta", "tarjetahabiente", "mesVencimiento", "yearVencimiento", "codigoSeguridad", "correo_electronico", "numero_telefonico"};
                    arregloAtributos = arr;
                    for (int j = 0; j < arr.length; j++) {
                        model.addColumn(arr[j]);
                    }
                    break;
                }
                case "FACTURA": {
                    String[] arr = {"noFactura", "codigoTienda", "direccion", "rtn", "fechaEmision", "idCliente", "total_venta"};
                    arregloAtributos = arr;
                    for (int j = 0; j < arr.length; j++) {
                        model.addColumn(arr[j]);
                    }
                    break;
                }
                case "TIENDA": {
                    String[] arr = {"codigoTienda", "ubicacion"};
                    arregloAtributos = arr;
                    for (int j = 0; j < arr.length; j++) {
                        model.addColumn(arr[j]);
                    }
                    break;
                }
            }
            if (flagAddRow) {
                model.setNumRows(1);

            }
        }
    }

    private boolean validarIngresoTable(JTable tabla, boolean guardar) {
        DefaultTableModel model = (DefaultTableModel) tabla_crear.getModel();
        //super funcion secreta que me 4actualize el dqu
        if (tabla_crear.isEditing()) {
            tabla_crear.getCellEditor().stopCellEditing();
        }
        if (model.getRowCount() != 0) {
            for (int i = 0; i < model.getColumnCount(); i++) {//se puede poner otro for para rows pero es feo pero asi soy feliz
                if (model.getValueAt(model.getRowCount() - 1, i) == null) {
                    if (guardar) {
                        model.removeRow(model.getRowCount() - 1);
                    } else {
                        JOptionPane.showMessageDialog(null, "No puede dejar ningun campo vacio!");
                        return false;
                    }
                }
                if ((model.getValueAt(model.getRowCount() - 1, i).toString().length() > 80) && !model.getValueAt(model.getRowCount() - 1, i).toString().equals("ubicacion")) {
                    JOptionPane.showMessageDialog(null, "En el campo \""
                            + model.getValueAt(model.getRowCount() - 1, i).toString() + "\" se esta pasando de la longitud maxima"
                            + " que es 80");
                    model.setValueAt("", model.getRowCount() - 1, i);
                    return false;
                } else if ((model.getValueAt(model.getRowCount() - 1, i).toString().length() > 150) && model.getValueAt(model.getRowCount() - 1, i).toString().equals("ubicacion")) {
                    JOptionPane.showMessageDialog(null, "En el campo \""
                            + model.getValueAt(model.getRowCount() - 1, i).toString() + "\" se esta pasando de la longitud maxima"
                            + " que es 150");
                    model.setValueAt("", model.getRowCount() - 1, i);
                }
//                if ("int".equals()) {
//                    try {
//                        Integer.parseInt(model.getValueAt(model.getRowCount() - 1, i).toString());
//                    } catch (NumberFormatException e) {
//                        JOptionPane.showMessageDialog(null, "En el campo \""
//                                + model.getValueAt(model.getRowCount() - 1, i).toString()
//                                + "\" esta ingresando caracteres y solo se permiten enteros!");
//                        return false;
//                    }
//                }
            }
        }
        return true;

    }

    public void run() {
        Thread current = Thread.currentThread();
        while (current == hilo) {
            horaa();
            hora_jbl.setText(hora + ":" + minutos + ":" + segundos);
        }
        try {
            Thread.sleep(1000);
        } catch (Exception e) {
        }
    }

    public void horaa() {
        Calendar calendario = new GregorianCalendar();
        Date horaactual = new Date();

        calendario.setTime(horaactual);
        hora = calendario.get(Calendar.HOUR_OF_DAY) > 9 ? "" + calendario.get(Calendar.HOUR_OF_DAY) : "0" + calendario.get(Calendar.HOUR_OF_DAY);
        minutos = calendario.get(Calendar.MINUTE) > 9 ? "" + calendario.get(Calendar.MINUTE) : "0" + calendario.get(Calendar.MINUTE);
        segundos = calendario.get(Calendar.SECOND) > 9 ? "" + calendario.get(Calendar.SECOND) : "0" + calendario.get(Calendar.SECOND);
    }

}
